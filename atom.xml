<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>world4jason</title>
  
  <subtitle>菜鳥搬磚日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://world4jason.github.io/"/>
  <updated>2018-06-03T09:33:11.513Z</updated>
  <id>https://world4jason.github.io/</id>
  
  <author>
    <name>Jason Yeh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mask RCNN Code Reading</title>
    <link href="https://world4jason.github.io/2018/05/30/Mask-RCNN-Code-Reading/"/>
    <id>https://world4jason.github.io/2018/05/30/Mask-RCNN-Code-Reading/</id>
    <published>2018-05-29T20:52:59.000Z</published>
    <updated>2018-06-03T09:33:11.513Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep Residual Network</title>
    <link href="https://world4jason.github.io/2018/04/07/Resnet-Deep-Residual-Network/"/>
    <id>https://world4jason.github.io/2018/04/07/Resnet-Deep-Residual-Network/</id>
    <published>2018-04-07T13:15:01.000Z</published>
    <updated>2018-04-07T13:12:28.883Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/categories/Model-Architecture/"/>
    
      <category term="Classification" scheme="https://world4jason.github.io/categories/Model-Architecture/Classification/"/>
    
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/tags/Model-Architecture/"/>
    
      <category term="Convolution" scheme="https://world4jason.github.io/tags/Convolution/"/>
    
      <category term="Classification" scheme="https://world4jason.github.io/tags/Classification/"/>
    
  </entry>
  
  <entry>
    <title>Optimize /</title>
    <link href="https://world4jason.github.io/2018/04/07/Optimize/"/>
    <id>https://world4jason.github.io/2018/04/07/Optimize/</id>
    <published>2018-04-07T13:15:01.000Z</published>
    <updated>2018-04-10T07:56:21.304Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Optimize" scheme="https://world4jason.github.io/categories/Optimize/"/>
    
    
  </entry>
  
  <entry>
    <title>VGG-VERY DEEP CONVOLUTIONAL NETWORK SFOR LARGE-SCALE IMAGE RECOGNITION</title>
    <link href="https://world4jason.github.io/2018/04/07/VGG-VERY-DEEP-CONVOLUTIONAL-NETWORK-SFOR-LARGE-SCALE-IMAGE-RECOGNITION/"/>
    <id>https://world4jason.github.io/2018/04/07/VGG-VERY-DEEP-CONVOLUTIONAL-NETWORK-SFOR-LARGE-SCALE-IMAGE-RECOGNITION/</id>
    <published>2018-04-07T13:05:01.000Z</published>
    <updated>2018-04-07T15:09:13.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇的摘要寫說針對AlexNet的基礎上主要做了兩方面的改進：<br>1.使用了最小的3x3卷積核尺寸和最小間隔。</p><ol><li>在整個圖片和multi-scale上訓練和測試圖片。<br>論文原句：1. Use smaller receptive window size and smaller stride of the first convolutional layer.<br>2.Training and testing the networks densely over the whole image and over multiple scales.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexNet做改進, 所以VGG本身的問題並不會在這篇討論, 會在ResNet那篇再探討。</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231088858941.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231088789196.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231067749133.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231137520393.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>採用較小的Filter尺寸-3x3，卷積的間隔s=1:<br>1：3x3是最小的能夠捕獲上下左右和中心概念的尺寸。<br>2：兩個3x3的捲基層的有限感受野是5x5；三個3x3的感受野是7x7，可以替代大的filter尺寸。<br>3：多個3x3的捲基層比一個大尺寸filter卷基層有更多的非線性，使得判決函數更加具有判決性。<br>4：多個3x3的捲積層比一個大尺寸的filter有更少的參數，假設卷基層的輸入和輸出的特徵圖大小相同為C，那麼三個3x3的捲積層參數個數3x（3x3xCxC）=27CC；一個7x7的捲積層參數為49CC；所以可以把三個3x3的filter看成是一個7x7filter的分解（中間層有非線性的分解）。<br>也使用過1x1 filter:<br>作用是在不影響輸入輸出維數的情況下，對輸入進行線性形變，然後通過Relu進行非線性處理，增加網絡的非線性表達能力。<br>Max-Pooling：2x2，間隔s=2；</p><p>論文中解釋關於僅使用3x3 conv kernel，因為兩個3x3的conv kernel疊合的reception field等效於一個5x5 conv kernel(亦即每個pixel可以correlate到周圍的5x5個pixel), 而三個3x3則可以等效於一個7x7，但兩層3x3的參數量僅有一層5x5的(3x3x2)/(5x5) = 0.72倍，而三層3x3參數量是一層7x7的(3x3x3)/(7x7)=0.55倍，對應到的範圍等效並且可使得需參數量更少，並且疊越多層Conv+ReLU的特徵學習能力比單一層Conv+ReLU來的更好。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231135640564.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ol><li>Filter Size<br>相對於AlexNet 每個Stage僅含有一個Conv層, Filter 7x7, VGG每個Stage有2~4個Conv層,而Filter只有3x3, 原論文內”This can be seen as imposing a regularization on the 7 × 7 conv. filters, forcing them to have a decomposition through the 3 × 3 filters”<br>他說7x7 filter可以被分解成若干个3x3的filter的叠加。<br>類比一下n維空間的向量x，x的正交分解<br>x = x1(1, 0, 0, ….) + x2(0, 1, 0, …) + x3(0, 0, 1,…) + … + xn(0, 0, 0, …, 1)</li></ol><p>每一組的每一層的filter被類比成n維歐幾里得空間的基底。<br>若VGG的一組含有3層3x3的filter，則我們則假設一個7x7的filter可以被分解成3種“正交”的3x3的filter。</p><p>作者原文：First, we incorporate three non-linearrectification layers instead of a single one, which makes the decision function more discriminative.Second, we decrease the number of parameters: assuming that both the input and the output of athree-layer 3 × 3 convolution stack has C channels, the stack is parametrised by 3 32C^2 = 27C^2weights; at the same time, a single 7 × 7 conv. layer would require 72C^2 = 49C^2</p><p>後來googleNet<br>將3×3的卷積分解成31和13的卷積，可以減少33％的計算量，如果將3×3分解為兩個2×2的，可以減少11％的計算量，而且利用非對稱卷積的效果還更好。<br>實踐表明，不要過早的使用這種分解操作，在特徵映射大小為（12〜20）之間，使用它，效果是比較好的。 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231135906645.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇的摘要寫說針對AlexNet的基礎上主要做了兩方面的改進：&lt;br&gt;1.使用了最小的3x3卷積核尺寸和最小間隔。&lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/categories/Model-Architecture/"/>
    
      <category term="Classification" scheme="https://world4jason.github.io/categories/Model-Architecture/Classification/"/>
    
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/tags/Model-Architecture/"/>
    
      <category term="Convolution" scheme="https://world4jason.github.io/tags/Convolution/"/>
    
      <category term="Classification" scheme="https://world4jason.github.io/tags/Classification/"/>
    
  </entry>
  
  <entry>
    <title>CNN模型壓縮系列</title>
    <link href="https://world4jason.github.io/2018/04/07/Model-Compression/"/>
    <id>https://world4jason.github.io/2018/04/07/Model-Compression/</id>
    <published>2018-04-07T13:05:01.000Z</published>
    <updated>2018-04-07T16:43:07.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="網絡修剪"><a href="#網絡修剪" class="headerlink" title="網絡修剪"></a>網絡修剪</h2><p>網絡修剪，採用當網絡權重非常小的時候（小於某個設定的閾值），把它置0，就像二值網絡一般;然後屏蔽被設置為0的權重更新，繼續進行訓練;以此循環，每隔訓練幾輪過後，繼續進行修剪。<br>例如Deep-Compression這篇paper</p><h2 id="權重共享"><a href="#權重共享" class="headerlink" title="權重共享"></a>權重共享</h2><p>對於每一層的參數，我們進行k-均值聚類，進行量化，對於歸屬於同一個聚類中心的權重，採用共享一個權重，進行重新訓練。需要注意的是這個權重共享並不是層之間的權重共享，這是對於每一層的單獨共享</p><h2 id="增加L2權重"><a href="#增加L2權重" class="headerlink" title="增加L2權重"></a>增加L2權重</h2><p>增加L2權重可以讓更多的權重，靠近0，這樣每次修剪的比例大大增加。</p><h2 id="從結構上，簡化網絡計算，"><a href="#從結構上，簡化網絡計算，" class="headerlink" title="從結構上，簡化網絡計算，"></a>從結構上，簡化網絡計算，</h2><p>這些需要自己閱讀比較多相關文獻，才能設計出合理，速度更快的網絡，比如引入消防模塊，NIN，除全連接層等一些設計思想，這邊不進行具體詳述。<br>SqueezeNet</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Huffman Coding</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;網絡修剪&quot;&gt;&lt;a href=&quot;#網絡修剪&quot; class=&quot;headerlink&quot; title=&quot;網絡修剪&quot;&gt;&lt;/a&gt;網絡修剪&lt;/h2&gt;&lt;p&gt;網絡修剪，採用當網絡權重非常小的時候（小於某個設定的閾值），把它置0，就像二值網絡一般;然後屏蔽被設置為0的權重更新，繼續進
      
    
    </summary>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/categories/Model-Architecture/"/>
    
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Model Architecture" scheme="https://world4jason.github.io/tags/Model-Architecture/"/>
    
      <category term="Convolution" scheme="https://world4jason.github.io/tags/Convolution/"/>
    
      <category term="Model Compression" scheme="https://world4jason.github.io/tags/Model-Compression/"/>
    
  </entry>
  
  <entry>
    <title>Light Head R-CNN</title>
    <link href="https://world4jason.github.io/2018/03/16/Light%20Head%20R-CNN/"/>
    <id>https://world4jason.github.io/2018/03/16/Light Head R-CNN/</id>
    <published>2018-03-16T05:53:47.000Z</published>
    <updated>2018-03-26T14:20:41.337Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/media/%E6%97%B7%E8%A7%86face++%E7%A0%94%E7%A9%B6%E9%99%A2%E8%A7%A3%E8%AF%BBLight-Head%20R-CNN.mp4">旷视face++研究院解读Light-Head R-CNN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/media/%E6%97%B7%E8%A7%86face++%E7%A0%94%E7%A9%B6%E9%99%A2%E8%A7%A3%E8%AF%BBLight-Head%20R-CNN.mp4&quot;&gt;旷视face++研究院解读Light-Head R-CN
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Instance Segmentation Series</title>
    <link href="https://world4jason.github.io/2018/03/16/2018-03-27/"/>
    <id>https://world4jason.github.io/2018/03/16/2018-03-27/</id>
    <published>2018-03-16T05:53:47.000Z</published>
    <updated>2018-04-04T07:20:53.275Z</updated>
    
    <content type="html"><![CDATA[<p>MNC<br>FCIS<br>Mask R-CNN<br>PANet</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MNC&lt;br&gt;FCIS&lt;br&gt;Mask R-CNN&lt;br&gt;PANet&lt;/p&gt;

      
    
    </summary>
    
      <category term="Series" scheme="https://world4jason.github.io/categories/Series/"/>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/categories/Series/Segmentation/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow Function Usage And Example</title>
    <link href="https://world4jason.github.io/2018/03/16/Tensorflow-Function-Usage-And-Example/"/>
    <id>https://world4jason.github.io/2018/03/16/Tensorflow-Function-Usage-And-Example/</id>
    <published>2018-03-16T05:53:47.000Z</published>
    <updated>2018-04-01T08:31:28.387Z</updated>
    
    <content type="html"><![CDATA[<p>Mini Tensorflow example<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"> a = tf.placeholder(<span class="string">"float"</span>)</div><div class="line"> b = tf.placeholder(<span class="string">"float"</span>)</div><div class="line"></div><div class="line"> y = tf.mul(a, b) </div><div class="line"> sess = tf.Session()</div><div class="line"><span class="keyword">print</span> sess.run(y, feed_dict=&#123;a: <span class="number">3</span>, b: <span class="number">3</span>&#125;)</div><div class="line"> sess.close()</div></pre></td></tr></table></figure></p><table><thead><tr><th>操作組</th><th>操作</th></tr></thead><tbody><tr><td>Maths</td><td>Add, Sub, Mul, Div, Exp, Log, Greater, Less, Equal</td></tr><tr><td>Array</td><td>Concat, Slice, Split, Constant, Rank, Shape, Shuffle</td></tr><tr><td>Matrix</td><td>MatMul, MatrixInverse, MatrixDeterminant</td></tr><tr><td>Neuronal Network</td><td>SoftMax, Sigmoid, ReLU, Convolution2D, MaxPool</td></tr><tr><td>Checkpointing</td><td>Save, Restore</td></tr><tr><td>Queues and syncronizations</td><td>Enqueue, Dequeue, MutexAcquire, MutexRelease</td></tr><tr><td>Flow control</td><td>Merge, Switch, Enter, Leave, NextIteration</td></tr></tbody></table><p>TensorFlow的算術操作如下：</p><table><thead><tr><th>操作組</th><th>操作</th></tr></thead><tbody><tr><td>tf.add(x, y, name=None)</td><td>求和</td></tr><tr><td>tf.sub(x, y, name=None)</td><td>減法</td></tr><tr><td>tf.mul(x, y, name=None)</td><td>乘法</td></tr><tr><td>tf.div(x, y, name=None)</td><td>除法</td></tr><tr><td>tf.mod(x, y, name=None)</td><td>取模</td></tr><tr><td>tf.abs(x, name=None)</td><td>求絕對值</td></tr><tr><td>tf.neg(x, name=None)</td><td>取負 (y = -x).</td></tr><tr><td>tf.sign(x, name=None)</td><td>返回符號 y = sign(x) = -1 if x &lt; 0; 0 if x == 0; 1 if x &gt; 0.</td></tr><tr><td>tf.inv(x, name=None)</td><td>取反</td></tr><tr><td>tf.square(x, name=None)</td><td>計算平方 (y = x * x = x^2).</td></tr><tr><td>tf.round(x, name=None)</td><td>舍入最接近的整數      <br># ‘a’ is [0.9, 2.5, 2.3, -4.4]       <br> tf.round(a) ==&gt; [ 1.0, 3.0, 2.0, -4.0 ]</td></tr><tr><td>tf.sqrt(x, name=None)</td><td><br>開根號 (y = \sqrt{x} = x^{1/2}).</td></tr><tr><td>tf.pow(x, y, name=None)</td><td>冪次方                                                     <br># tensor ‘x’ is [[2, 2], [3, 3]]          <br># tensor ‘y’ is [[8, 16], [2, 3]] <br>tf.pow(x, y) ==&gt; [[256, 65536], [9, 27]]</td><td></td></tr><tr><td>tf.exp(x, name=None)</td><td>計算e的次方</td></tr><tr><td>tf.log(x, name=None)</td><td>計算log，一個輸入計算e的ln，兩輸入以第二輸入為底</td></tr><tr><td>tf.maximum(x, y, name=None)</td><td>返回最大值 (x &gt; y ? x : y)</td></tr><tr><td>tf.minimum(x, y, name=None)</td><td>返回最小值 (x &lt; y ? x : y)</td></tr><tr><td>tf.cos(x, name=None)</td><td>三角函數cosine</td></tr><tr><td>tf.sin(x, name=None)</td><td>三角函數sine</td></tr><tr><td>tf.tan(x, name=None)</td><td>三角函數tan</td></tr><tr><td>tf.atan(x, name=None)</td><td>三角函數ctan</td></tr></tbody></table><h2 id="張量操作Tensor-Transformations"><a href="#張量操作Tensor-Transformations" class="headerlink" title="張量操作Tensor Transformations"></a>張量操作Tensor Transformations</h2><p>####數據類型轉換Casting<br>| 操作組                        | 操作       |<br>|—————————-|——————————————————|<br>| tf.string_to_number                              |                      |<br>| (string_tensor, out_type=None, name=None)        | 字符串轉為數字              |<br>| tf.to_double(x, name=’ToDouble’)                 | 轉為64位浮點類型–float64    |<br>| tf.to_float(x, name=’ToFloat’)                   | 轉為32位浮點類型–float32    |<br>| tf.to_int32(x, name=’ToInt32’)                   | 轉為32位整型–int32        |<br>| tf.to_int64(x, name=’ToInt64’)                   | 轉為64位整型–int64        |<br>| tf.cast(x, dtype, name=None)                     | 將x或者x.values轉換為dtype |<br>| # tensor a is [1.8, 2.2], dtype=tf.float         |                      |<br>| tf.cast(a, tf.int32) ==&gt; [1, 2] # dtype=tf.int32 |                      | </p><h4 id="形狀操作Shapes-and-Shaping"><a href="#形狀操作Shapes-and-Shaping" class="headerlink" title="形狀操作Shapes and Shaping"></a>形狀操作Shapes and Shaping</h4><table><thead><tr><th>操作組</th><th>操作</th></tr></thead><tbody><tr><td>tf.shape(input, name=None)</td><td>返回數據的shape       <br> # ‘t’ is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]  <br> shape(t) ==&gt; [2, 2, 3]</td><td></td></tr><tr><td>tf.size(input, name=None)</td><td>返回數據的元素數量 <br> # ‘t’ is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]]  <br> size(t) ==&gt; 12</td><td></td></tr><tr><td>tf.rank(input, name=None)</td><td>返回tensor的rank    <br> 注意：此rank不同於矩陣的rank， <br> tensor的rank表示一個tensor需要的索引數目來唯一表示任何一個元素 <br> 也就是通常所説的 “order”, “degree”或”ndims”   <br> #’t’ is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]  <br> # shape of tensor ‘t’ is [2, 2, 3]                          <br> rank(t) ==&gt; 3</td><td></td></tr><tr><td>tf.reshape(tensor, shape, name=None)</td><td>改變tensor的形狀      <br> # tensor ‘t’ is [1, 2, 3, 4, 5, 6, 7, 8, 9] <br> # tensor ‘t’ has shape [9]   <br> reshape(t, [3, 3]) ==&gt;                                      <br> [[1, 2, 3],                                                 <br> [4, 5, 6],                                                  <br> [7, 8, 9]]                                                  <br> #如果shape有元素[-1],表示在該維度打平至一維                                 <br> # -1 將自動推導得為 9:                                             <br> reshape(t, [2, -1]) ==&gt;                                     <br> [[1, 1, 1, 2, 2, 2, 3, 3, 3],                               <br> [4, 4, 4, 5, 5, 5, 6, 6, 6]]</td><td></td></tr><tr><td>tf.expand_dims(input, dim, name=None)</td><td>插入維度1進入一個tensor中 <br> #該操作要求-1-input.dims()                                       <br> # ‘t’ is a tensor of shape [2]                              <br> shape(expand_dims(t, 0)) ==&gt; [1, 2]                         <br> shape(expand_dims(t, 1)) ==&gt; [2, 1]                         <br>shape(expand_dims(t, -1)) ==&gt; [2, 1] &lt;= dim &lt;= input.dims()</td></tr></tbody></table><p><a href="https://hk.saowen.com/a/2766b13f38b54ab09e6d478975f5feca8abbf01d842e2ca8f5111160fcbb0e36" target="_blank" rel="external">https://hk.saowen.com/a/2766b13f38b54ab09e6d478975f5feca8abbf01d842e2ca8f5111160fcbb0e36</a></p><h3 id="tf-reshape"><a href="#tf-reshape" class="headerlink" title="tf.reshape"></a>tf.reshape</h3><p>tf.reshape(tensor,shape, name=None) </p><p>重組</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># tensor </div><div class="line">'t' is [1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line"># tensor </div><div class="line">'t'has shape [9]</div><div class="line"></div><div class="line">reshape(t, [3, 3]) </div><div class="line">==&gt; </div><div class="line">[[1, 2, 3],</div><div class="line">[4, 5, 6],</div><div class="line">[7, 8, 9]]</div></pre></td></tr></table></figure><p>降為</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># tensor </div><div class="line">'t'is </div><div class="line">[[[1, 1], [2, 2]],                </div><div class="line">[[3, 3], [4, 4]]]</div><div class="line"># tensor </div><div class="line">'t'has shape [2, 2, 2]</div><div class="line">reshape(t, [2, 4]) </div><div class="line">==&gt; </div><div class="line">[[1, 1, 2, 2],</div><div class="line">[3, 3, 4, 4]]</div></pre></td></tr></table></figure><p>平坦</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># tensor </div><div class="line">'t' has shape [3, 2, 3]</div><div class="line"># pass </div><div class="line">'[-1]'</div><div class="line"> to flatten </div><div class="line">'t'</div><div class="line">reshape(t, [-1]) </div><div class="line">==&gt; [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]</div></pre></td></tr></table></figure><h3 id="tf-split"><a href="#tf-split" class="headerlink" title="tf.split"></a>tf.split</h3><p>tf.split(split_dim, num_split, value, name=’split’)<br>將大的tensor分割成更小的tensor，第一個參數代表沿著那一維開始分割，第二個參數代表切成幾段</p><h3 id="tf-nn-max-pool"><a href="#tf-nn-max-pool" class="headerlink" title="tf.nn.max_pool"></a>tf.nn.max_pool</h3><p>max pooling 是CNN 當中的最大值池化操作，其實用法和卷積很類似</p><p>tf.nn.max_pool(value,ksize, strides, padding, name=None)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">參數是四個，和卷積很類似：</div><div class="line"></div><div class="line">第一個參數value ：需要池化的輸入，一般池化層接在卷積層後面，所以輸入通常是<span class="built_in">feature</span> <span class="built_in">map</span> ，依然是[<span class="built_in">batch</span>, <span class="built_in">height</span>, <span class="built_in">width</span>, channels] 這樣的shape</div><div class="line"></div><div class="line">第二個參數ksize ：池化窗口的大小，取一個四維向量，一般是[<span class="number">1</span>, <span class="built_in">height</span>, <span class="built_in">width</span>, <span class="number">1</span>] ，因為我們不想在<span class="built_in">batch</span> 和channels 上做池化，所以這兩個維度設為了<span class="number">1</span></div><div class="line"></div><div class="line">第三個參數strides ：和卷積類似，窗口在每一個維度上滑動的步長，一般也是[<span class="number">1</span>, stride, stride ,<span class="number">1</span>]</div><div class="line"></div><div class="line">第四個參數padding ：和卷積類似，可以取'VALID' 或者'SAME'</div><div class="line">返回一個Tensor ，類型不變，shape 仍然是[<span class="built_in">batch</span>, <span class="built_in">height</span>, <span class="built_in">width</span>, channels] 這種形式</div></pre></td></tr></table></figure><p>假設有這樣一張圖，雙通道<br>第一個通道：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15225714198554.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>第二個通道：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15225714248800.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">a=tf.constant([</div><div class="line"></div><div class="line">        [[<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>],</div><div class="line"></div><div class="line">       [<span class="number">5.0</span>,<span class="number">6.0</span>,<span class="number">7.0</span>,<span class="number">8.0</span>],</div><div class="line"></div><div class="line">       [<span class="number">8.0</span>,<span class="number">7.0</span>,<span class="number">6.0</span>,<span class="number">5.0</span>],</div><div class="line"></div><div class="line">       [<span class="number">4.0</span>,<span class="number">3.0</span>,<span class="number">2.0</span>,<span class="number">1.0</span>]],</div><div class="line"></div><div class="line">       [[<span class="number">4.0</span>,<span class="number">3.0</span>,<span class="number">2.0</span>,<span class="number">1.0</span>],</div><div class="line"></div><div class="line">        [<span class="number">8.0</span>,<span class="number">7.0</span>,<span class="number">6.0</span>,<span class="number">5.0</span>],</div><div class="line"></div><div class="line">        [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>],</div><div class="line"></div><div class="line">        [<span class="number">5.0</span>,<span class="number">6.0</span>,<span class="number">7.0</span>,<span class="number">8.0</span>]]</div><div class="line"></div><div class="line">    ])</div><div class="line"></div><div class="line">a=tf.reshape(a,[<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>])</div><div class="line">pooling=tf.nn.max_pool(a,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'VALID'</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">   print(<span class="string">"image:"</span>)</div><div class="line">   image=sess.run(a)</div><div class="line">   <span class="keyword">print</span> (image)</div><div class="line">   print(<span class="string">"reslut:"</span>)</div><div class="line">   result=sess.run(pooling)</div><div class="line">   <span class="keyword">print</span> (result)</div></pre></td></tr></table></figure><p>這裡步長為1 ，窗口大小2×2 ，輸出結果：</p><p>image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[[</div><div class="line">[[ <span class="number">1.</span> <span class="number">2.</span>]</div><div class="line">[ <span class="number">3.</span> <span class="number">4.</span>]</div><div class="line">[ <span class="number">5.</span> <span class="number">6.</span>]</div><div class="line">[ <span class="number">7.</span> <span class="number">8.</span>]]</div><div class="line"></div><div class="line">[[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">6.</span> <span class="number">5.</span>]</div><div class="line">[ <span class="number">4.</span> <span class="number">3.</span>]</div><div class="line">[ <span class="number">2.</span> <span class="number">1.</span>]]</div><div class="line"></div><div class="line">[[ <span class="number">4.</span> <span class="number">3.</span>]</div><div class="line">[ <span class="number">2.</span> <span class="number">1.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">6.</span> <span class="number">5.</span>]]</div><div class="line"></div><div class="line">[[ <span class="number">1.</span> <span class="number">2.</span>]</div><div class="line">[ <span class="number">3.</span> <span class="number">4.</span>]</div><div class="line">[ <span class="number">5.</span> <span class="number">6.</span>]</div><div class="line">[ <span class="number">7.</span> <span class="number">8.</span>]]]]</div><div class="line"></div><div class="line">reslut:</div><div class="line"></div><div class="line">[[</div><div class="line">[[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">6.</span> <span class="number">6.</span>]</div><div class="line">[ <span class="number">7.</span> <span class="number">8.</span>]]</div><div class="line"></div><div class="line">[[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">7.</span>]]</div><div class="line"></div><div class="line">[[ <span class="number">4.</span> <span class="number">4.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">8.</span>]]]]</div></pre></td></tr></table></figure><p>池化後的圖就是：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15225714762104.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15225714795456.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>證明了程序的結果是正確的。<br>我們還可以改變步長</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pooling=tf.nn.max_pool(a,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'VALID'</span>)</div><div class="line"></div><div class="line">最後的result 就變成：</div><div class="line"></div><div class="line">reslut:</div><div class="line">[[[[ <span class="number">8.</span> <span class="number">7.</span>]</div><div class="line">[ <span class="number">7.</span> <span class="number">8.</span>]]</div><div class="line">[[ <span class="number">4.</span> <span class="number">4.</span>]</div><div class="line">[ <span class="number">8.</span> <span class="number">8.</span>]]]]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mini Tensorflow example&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mask R-CNN</title>
    <link href="https://world4jason.github.io/2018/03/10/Mask%20R-CNN%20Code%20Reading/"/>
    <id>https://world4jason.github.io/2018/03/10/Mask R-CNN Code Reading/</id>
    <published>2018-03-09T18:13:59.000Z</published>
    <updated>2018-04-02T13:54:05.001Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/matterport/Mask_RCNN" target="_blank" rel="external">https://github.com/matterport/Mask_RCNN</a></p><p>#model.py</p><ol><li>import 需要的東西 tf ver&gt;1.3 &amp;&amp; keras ver&gt;2.0.8</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> skimage.transform</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> keras</div><div class="line"><span class="keyword">import</span> keras.backend <span class="keyword">as</span> K</div><div class="line"><span class="keyword">import</span> keras.layers <span class="keyword">as</span> KL</div><div class="line"><span class="keyword">import</span> keras.initializers <span class="keyword">as</span> KI</div><div class="line"><span class="keyword">import</span> keras.engine <span class="keyword">as</span> KE</div><div class="line"><span class="keyword">import</span> keras.models <span class="keyword">as</span> KM</div><div class="line"></div><div class="line"><span class="keyword">import</span> utils</div><div class="line"></div><div class="line"><span class="comment"># Requires TensorFlow 1.3+ and Keras 2.0.8+.</span></div><div class="line"><span class="keyword">from</span> distutils.version <span class="keyword">import</span> LooseVersion</div><div class="line"><span class="keyword">assert</span> LooseVersion(tf.__version__) &gt;= LooseVersion(<span class="string">"1.3"</span>)</div><div class="line"><span class="keyword">assert</span> LooseVersion(keras.__version__) &gt;= LooseVersion(<span class="string">'2.0.8'</span>)</div></pre></td></tr></table></figure><ol><li>封裝Mask R-CNN </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaskRCNN</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Encapsulates the Mask RCNN model functionality.</span></div><div class="line"></div><div class="line">    The actual Keras model is in the keras_model property.</div><div class="line">    """</div><div class="line">    <span class="comment">## Config 設定是由外部傳入，像是ballon.py裡面有關於batch_size、Iteration等等，詳細內容去看config.py</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mode, config, model_dir)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        mode: Either "training" or "inference"</div><div class="line">        config: A Sub-class of the Config class</div><div class="line">        model_dir: Directory to save training logs and trained weights</div><div class="line">        """</div><div class="line">        <span class="keyword">assert</span> mode <span class="keyword">in</span> [<span class="string">'training'</span>, <span class="string">'inference'</span>]</div><div class="line">        self.mode = mode</div><div class="line">        self.config = config</div><div class="line">        self.model_dir = model_dir</div><div class="line">        self.set_log_dir()</div><div class="line">        self.keras_model = self.build(mode=mode, config=config)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, mode, config)</span>:</span></div><div class="line">        <span class="string">"""Build Mask R-CNN architecture.</span></div><div class="line">            input_shape: The shape of the input image.</div><div class="line">            mode: Either "training" or "inference". The inputs and</div><div class="line">                outputs of the model differ accordingly.</div><div class="line">        """</div><div class="line">        <span class="keyword">assert</span> mode <span class="keyword">in</span> [<span class="string">'training'</span>, <span class="string">'inference'</span>]</div><div class="line">        </div><div class="line">        <span class="comment"># 強迫要求一定要是 長寬一定要是32的倍數，不然downscaling跟upscaling會有問題</span></div><div class="line">        <span class="comment"># 尤其是convultion到後面Resnet是縮放了32倍</span></div><div class="line">        <span class="comment"># Image size must be dividable by 2 multiple times</span></div><div class="line">        h, w = config.IMAGE_SHAPE[:<span class="number">2</span>]</div><div class="line">        <span class="keyword">if</span> h / <span class="number">2</span>**<span class="number">6</span> != int(h / <span class="number">2</span>**<span class="number">6</span>) <span class="keyword">or</span> w / <span class="number">2</span>**<span class="number">6</span> != int(w / <span class="number">2</span>**<span class="number">6</span>):</div><div class="line">            <span class="keyword">raise</span> Exception(<span class="string">"Image size must be dividable by 2 at least 6 times "</span></div><div class="line">                            <span class="string">"to avoid fractions when downscaling and upscaling."</span></div><div class="line">                            <span class="string">"For example, use 256, 320, 384, 448, 512, ... etc. "</span>)</div><div class="line">        </div><div class="line">        <span class="comment"># config.IMAGE_SHAPE.tolist() = [1024,1024,3]</span></div><div class="line">        <span class="comment"># input_image_meta有點意義不明</span></div><div class="line">        <span class="comment"># 此段落是建立需要的輸入，都用KL.Input來轉化</span></div><div class="line">        <span class="comment"># Inputs</span></div><div class="line">        input_image = KL.Input(</div><div class="line">            shape=config.IMAGE_SHAPE.tolist(), name=<span class="string">"input_image"</span>)</div><div class="line">        input_image_meta = KL.Input(shape=[<span class="keyword">None</span>], name=<span class="string">"input_image_meta"</span>)</div><div class="line">        <span class="keyword">if</span> mode == <span class="string">"training"</span>:</div><div class="line">            <span class="comment"># RPN GT</span></div><div class="line">            input_rpn_match = KL.Input(</div><div class="line">                shape=[<span class="keyword">None</span>, <span class="number">1</span>], name=<span class="string">"input_rpn_match"</span>, dtype=tf.int32)</div><div class="line">            input_rpn_bbox = KL.Input(</div><div class="line">                shape=[<span class="keyword">None</span>, <span class="number">4</span>], name=<span class="string">"input_rpn_bbox"</span>, dtype=tf.float32)</div><div class="line"></div><div class="line">            <span class="comment"># Detection GT (class IDs, bounding boxes, and masks)</span></div><div class="line">            <span class="comment"># 1. GT Class IDs (zero padded)</span></div><div class="line">            input_gt_class_ids = KL.Input(</div><div class="line">                shape=[<span class="keyword">None</span>], name=<span class="string">"input_gt_class_ids"</span>, dtype=tf.int32)</div><div class="line">            <span class="comment"># 2. GT Boxes in pixels (zero padded)</span></div><div class="line">            <span class="comment"># [batch, MAX_GT_INSTANCES, (y1, x1, y2, x2)] in image coordinates</span></div><div class="line">            input_gt_boxes = KL.Input(</div><div class="line">                shape=[<span class="keyword">None</span>, <span class="number">4</span>], name=<span class="string">"input_gt_boxes"</span>, dtype=tf.float32)</div><div class="line">            <span class="comment"># Normalize coordinates</span></div><div class="line">            h, w = K.shape(input_image)[<span class="number">1</span>], K.shape(input_image)[<span class="number">2</span>]</div><div class="line">            image_scale = K.cast(K.stack([h, w, h, w], axis=<span class="number">0</span>), tf.float32)</div><div class="line">            gt_boxes = KL.Lambda(<span class="keyword">lambda</span> x: x / image_scale)(input_gt_boxes)</div><div class="line">            <span class="comment"># 3. GT Masks (zero padded)</span></div><div class="line">            <span class="comment"># [batch, height, width, MAX_GT_INSTANCES]</span></div><div class="line">            <span class="keyword">if</span> config.USE_MINI_MASK:</div><div class="line">                input_gt_masks = KL.Input(</div><div class="line">                    shape=[config.MINI_MASK_SHAPE[<span class="number">0</span>],</div><div class="line">                           config.MINI_MASK_SHAPE[<span class="number">1</span>], <span class="keyword">None</span>],</div><div class="line">                    name=<span class="string">"input_gt_masks"</span>, dtype=bool)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                input_gt_masks = KL.Input(</div><div class="line">                    shape=[config.IMAGE_SHAPE[<span class="number">0</span>], config.IMAGE_SHAPE[<span class="number">1</span>], <span class="keyword">None</span>],</div><div class="line">                    name=<span class="string">"input_gt_masks"</span>, dtype=bool)</div><div class="line"></div><div class="line">        <span class="comment"># Build the shared convolutional layers.</span></div><div class="line">        <span class="comment"># Bottom-up Layers</span></div><div class="line">        <span class="comment"># Returns a list of the last layers of each stage, 5 in total.</span></div><div class="line">        <span class="comment"># Don't create the thead (stage 5), so we pick the 4th item in the list.</span></div><div class="line">        _, C2, C3, C4, C5 = resnet_graph(input_image, config.BACKBONE, stage5=<span class="keyword">True</span>)</div><div class="line">        <span class="comment"># Top-down Layers</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> add assert to varify feature map sizes match what's in config</span></div><div class="line">        P5 = KL.Conv2D(<span class="number">256</span>, (<span class="number">1</span>, <span class="number">1</span>), name=<span class="string">'fpn_c5p5'</span>)(C5)</div><div class="line">        P4 = KL.Add(name=<span class="string">"fpn_p4add"</span>)([</div><div class="line">            KL.UpSampling2D(size=(<span class="number">2</span>, <span class="number">2</span>), name=<span class="string">"fpn_p5upsampled"</span>)(P5),</div><div class="line">            KL.Conv2D(<span class="number">256</span>, (<span class="number">1</span>, <span class="number">1</span>), name=<span class="string">'fpn_c4p4'</span>)(C4)])</div><div class="line">        P3 = KL.Add(name=<span class="string">"fpn_p3add"</span>)([</div><div class="line">            KL.UpSampling2D(size=(<span class="number">2</span>, <span class="number">2</span>), name=<span class="string">"fpn_p4upsampled"</span>)(P4),</div><div class="line">            KL.Conv2D(<span class="number">256</span>, (<span class="number">1</span>, <span class="number">1</span>), name=<span class="string">'fpn_c3p3'</span>)(C3)])</div><div class="line">        P2 = KL.Add(name=<span class="string">"fpn_p2add"</span>)([</div><div class="line">            KL.UpSampling2D(size=(<span class="number">2</span>, <span class="number">2</span>), name=<span class="string">"fpn_p3upsampled"</span>)(P3),</div><div class="line">            KL.Conv2D(<span class="number">256</span>, (<span class="number">1</span>, <span class="number">1</span>), name=<span class="string">'fpn_c2p2'</span>)(C2)])</div><div class="line">        <span class="comment"># Attach 3x3 conv to all P layers to get the final feature maps.</span></div><div class="line">        P2 = KL.Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">"SAME"</span>, name=<span class="string">"fpn_p2"</span>)(P2)</div><div class="line">        P3 = KL.Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">"SAME"</span>, name=<span class="string">"fpn_p3"</span>)(P3)</div><div class="line">        P4 = KL.Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">"SAME"</span>, name=<span class="string">"fpn_p4"</span>)(P4)</div><div class="line">        P5 = KL.Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">"SAME"</span>, name=<span class="string">"fpn_p5"</span>)(P5)</div><div class="line">        <span class="comment"># P6 is used for the 5th anchor scale in RPN. Generated by</span></div><div class="line">        <span class="comment"># subsampling from P5 with stride of 2.</span></div><div class="line">        P6 = KL.MaxPooling2D(pool_size=(<span class="number">1</span>, <span class="number">1</span>), strides=<span class="number">2</span>, name=<span class="string">"fpn_p6"</span>)(P5)</div><div class="line"></div><div class="line">        <span class="comment"># Note that P6 is used in RPN, but not in the classifier heads.</span></div><div class="line">        rpn_feature_maps = [P2, P3, P4, P5, P6]</div><div class="line">        mrcnn_feature_maps = [P2, P3, P4, P5]</div><div class="line"></div><div class="line">        <span class="comment"># Generate Anchors</span></div><div class="line">        self.anchors = utils.generate_pyramid_anchors(config.RPN_ANCHOR_SCALES,</div><div class="line">                                                      config.RPN_ANCHOR_RATIOS,</div><div class="line">                                                      config.BACKBONE_SHAPES,</div><div class="line">                                                      config.BACKBONE_STRIDES,</div><div class="line">                                                      config.RPN_ANCHOR_STRIDE)</div><div class="line"></div><div class="line">        <span class="comment"># RPN Model</span></div><div class="line">        rpn = build_rpn_model(config.RPN_ANCHOR_STRIDE,</div><div class="line">                              len(config.RPN_ANCHOR_RATIOS), <span class="number">256</span>)</div><div class="line">        <span class="comment"># Loop through pyramid layers</span></div><div class="line">        layer_outputs = []  <span class="comment"># list of lists</span></div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> rpn_feature_maps:</div><div class="line">            layer_outputs.append(rpn([p]))</div><div class="line">        <span class="comment"># Concatenate layer outputs</span></div><div class="line">        <span class="comment"># Convert from list of lists of level outputs to list of lists</span></div><div class="line">        <span class="comment"># of outputs across levels.</span></div><div class="line">        <span class="comment"># e.g. [[a1, b1, c1], [a2, b2, c2]] =&gt; [[a1, a2], [b1, b2], [c1, c2]]</span></div><div class="line">        output_names = [<span class="string">"rpn_class_logits"</span>, <span class="string">"rpn_class"</span>, <span class="string">"rpn_bbox"</span>]</div><div class="line">        outputs = list(zip(*layer_outputs))</div><div class="line">        outputs = [KL.Concatenate(axis=<span class="number">1</span>, name=n)(list(o))</div><div class="line">                   <span class="keyword">for</span> o, n <span class="keyword">in</span> zip(outputs, output_names)]</div><div class="line"></div><div class="line">        rpn_class_logits, rpn_class, rpn_bbox = outputs</div><div class="line"></div><div class="line">        <span class="comment"># Generate proposals</span></div><div class="line">        <span class="comment"># Proposals are [batch, N, (y1, x1, y2, x2)] in normalized coordinates</span></div><div class="line">        <span class="comment"># and zero padded.</span></div><div class="line">        proposal_count = config.POST_NMS_ROIS_TRAINING <span class="keyword">if</span> mode == <span class="string">"training"</span>\</div><div class="line">            <span class="keyword">else</span> config.POST_NMS_ROIS_INFERENCE</div><div class="line">        rpn_rois = ProposalLayer(proposal_count=proposal_count,</div><div class="line">                                 nms_threshold=config.RPN_NMS_THRESHOLD,</div><div class="line">                                 name=<span class="string">"ROI"</span>,</div><div class="line">                                 anchors=self.anchors,</div><div class="line">                                 config=config)([rpn_class, rpn_bbox])</div><div class="line"></div><div class="line">        <span class="keyword">if</span> mode == <span class="string">"training"</span>:</div><div class="line">            <span class="comment"># Class ID mask to mark class IDs supported by the dataset the image</span></div><div class="line">            <span class="comment"># came from.</span></div><div class="line">            _, _, _, active_class_ids = KL.Lambda(<span class="keyword">lambda</span> x: parse_image_meta_graph(x),</div><div class="line">                                                  mask=[<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>])(input_image_meta)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> config.USE_RPN_ROIS:</div><div class="line">                <span class="comment"># Ignore predicted ROIs and use ROIs provided as an input.</span></div><div class="line">                input_rois = KL.Input(shape=[config.POST_NMS_ROIS_TRAINING, <span class="number">4</span>],</div><div class="line">                                      name=<span class="string">"input_roi"</span>, dtype=np.int32)</div><div class="line">                <span class="comment"># Normalize coordinates to 0-1 range.</span></div><div class="line">                target_rois = KL.Lambda(<span class="keyword">lambda</span> x: K.cast(</div><div class="line">                    x, tf.float32) / image_scale[:<span class="number">4</span>])(input_rois)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                target_rois = rpn_rois</div><div class="line"></div><div class="line">            <span class="comment"># Generate detection targets</span></div><div class="line">            <span class="comment"># Subsamples proposals and generates target outputs for training</span></div><div class="line">            <span class="comment"># Note that proposal class IDs, gt_boxes, and gt_masks are zero</span></div><div class="line">            <span class="comment"># padded. Equally, returned rois and targets are zero padded.</span></div><div class="line">            rois, target_class_ids, target_bbox, target_mask =\</div><div class="line">                DetectionTargetLayer(config, name=<span class="string">"proposal_targets"</span>)([</div><div class="line">                    target_rois, input_gt_class_ids, gt_boxes, input_gt_masks])</div><div class="line"></div><div class="line">            <span class="comment"># Network Heads</span></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> verify that this handles zero padded ROIs</span></div><div class="line">            mrcnn_class_logits, mrcnn_class, mrcnn_bbox =\</div><div class="line">                fpn_classifier_graph(rois, mrcnn_feature_maps, config.IMAGE_SHAPE,</div><div class="line">                                     config.POOL_SIZE, config.NUM_CLASSES)</div><div class="line"></div><div class="line">            mrcnn_mask = build_fpn_mask_graph(rois, mrcnn_feature_maps,</div><div class="line">                                              config.IMAGE_SHAPE,</div><div class="line">                                              config.MASK_POOL_SIZE,</div><div class="line">                                              config.NUM_CLASSES)</div><div class="line"></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> clean up (use tf.identify if necessary)</span></div><div class="line">            output_rois = KL.Lambda(<span class="keyword">lambda</span> x: x * <span class="number">1</span>, name=<span class="string">"output_rois"</span>)(rois)</div><div class="line"></div><div class="line">            <span class="comment"># Losses</span></div><div class="line">            rpn_class_loss = KL.Lambda(<span class="keyword">lambda</span> x: rpn_class_loss_graph(*x), name=<span class="string">"rpn_class_loss"</span>)(</div><div class="line">                [input_rpn_match, rpn_class_logits])</div><div class="line">            rpn_bbox_loss = KL.Lambda(<span class="keyword">lambda</span> x: rpn_bbox_loss_graph(config, *x), name=<span class="string">"rpn_bbox_loss"</span>)(</div><div class="line">                [input_rpn_bbox, input_rpn_match, rpn_bbox])</div><div class="line">            class_loss = KL.Lambda(<span class="keyword">lambda</span> x: mrcnn_class_loss_graph(*x), name=<span class="string">"mrcnn_class_loss"</span>)(</div><div class="line">                [target_class_ids, mrcnn_class_logits, active_class_ids])</div><div class="line">            bbox_loss = KL.Lambda(<span class="keyword">lambda</span> x: mrcnn_bbox_loss_graph(*x), name=<span class="string">"mrcnn_bbox_loss"</span>)(</div><div class="line">                [target_bbox, target_class_ids, mrcnn_bbox])</div><div class="line">            mask_loss = KL.Lambda(<span class="keyword">lambda</span> x: mrcnn_mask_loss_graph(*x), name=<span class="string">"mrcnn_mask_loss"</span>)(</div><div class="line">                [target_mask, target_class_ids, mrcnn_mask])</div><div class="line"></div><div class="line">            <span class="comment"># Model</span></div><div class="line">            inputs = [input_image, input_image_meta,</div><div class="line">                      input_rpn_match, input_rpn_bbox, input_gt_class_ids, input_gt_boxes, input_gt_masks]</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> config.USE_RPN_ROIS:</div><div class="line">                inputs.append(input_rois)</div><div class="line">            outputs = [rpn_class_logits, rpn_class, rpn_bbox,</div><div class="line">                       mrcnn_class_logits, mrcnn_class, mrcnn_bbox, mrcnn_mask,</div><div class="line">                       rpn_rois, output_rois,</div><div class="line">                       rpn_class_loss, rpn_bbox_loss, class_loss, bbox_loss, mask_loss]</div><div class="line">            model = KM.Model(inputs, outputs, name=<span class="string">'mask_rcnn'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># Network Heads</span></div><div class="line">            <span class="comment"># Proposal classifier and BBox regressor heads</span></div><div class="line">            mrcnn_class_logits, mrcnn_class, mrcnn_bbox =\</div><div class="line">                fpn_classifier_graph(rpn_rois, mrcnn_feature_maps, config.IMAGE_SHAPE,</div><div class="line">                                     config.POOL_SIZE, config.NUM_CLASSES)</div><div class="line"></div><div class="line">            <span class="comment"># Detections</span></div><div class="line">            <span class="comment"># output is [batch, num_detections, (y1, x1, y2, x2, class_id, score)] in image coordinates</span></div><div class="line">            detections = DetectionLayer(config, name=<span class="string">"mrcnn_detection"</span>)(</div><div class="line">                [rpn_rois, mrcnn_class, mrcnn_bbox, input_image_meta])</div><div class="line"></div><div class="line">            <span class="comment"># Convert boxes to normalized coordinates</span></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> let DetectionLayer return normalized coordinates to avoid</span></div><div class="line">            <span class="comment">#       unnecessary conversions</span></div><div class="line">            h, w = config.IMAGE_SHAPE[:<span class="number">2</span>]</div><div class="line">            detection_boxes = KL.Lambda(</div><div class="line">                <span class="keyword">lambda</span> x: x[..., :<span class="number">4</span>] / np.array([h, w, h, w]))(detections)</div><div class="line"></div><div class="line">            <span class="comment"># Create masks for detections</span></div><div class="line">            mrcnn_mask = build_fpn_mask_graph(detection_boxes, mrcnn_feature_maps,</div><div class="line">                                              config.IMAGE_SHAPE,</div><div class="line">                                              config.MASK_POOL_SIZE,</div><div class="line">                                              config.NUM_CLASSES)</div><div class="line"></div><div class="line">            model = KM.Model([input_image, input_image_meta],</div><div class="line">                             [detections, mrcnn_class, mrcnn_bbox,</div><div class="line">                                 mrcnn_mask, rpn_rois, rpn_class, rpn_bbox],</div><div class="line">                             name=<span class="string">'mask_rcnn'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Add multi-GPU support.</span></div><div class="line">        <span class="keyword">if</span> config.GPU_COUNT &gt; <span class="number">1</span>:</div><div class="line">            <span class="keyword">from</span> parallel_model <span class="keyword">import</span> ParallelModel</div><div class="line">            model = ParallelModel(model, config.GPU_COUNT)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> model</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_last</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Finds the last checkpoint file of the last trained model in the</span></div><div class="line">        model directory.</div><div class="line">        Returns:</div><div class="line">            log_dir: The directory where events and weights are saved</div><div class="line">            checkpoint_path: the path to the last checkpoint file</div><div class="line">        """</div><div class="line">        <span class="comment"># Get directory names. Each directory corresponds to a model</span></div><div class="line">        dir_names = next(os.walk(self.model_dir))[<span class="number">1</span>]</div><div class="line">        key = self.config.NAME.lower()</div><div class="line">        dir_names = filter(<span class="keyword">lambda</span> f: f.startswith(key), dir_names)</div><div class="line">        dir_names = sorted(dir_names)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dir_names:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">        <span class="comment"># Pick last directory</span></div><div class="line">        dir_name = os.path.join(self.model_dir, dir_names[<span class="number">-1</span>])</div><div class="line">        <span class="comment"># Find the last checkpoint</span></div><div class="line">        checkpoints = next(os.walk(dir_name))[<span class="number">2</span>]</div><div class="line">        checkpoints = filter(<span class="keyword">lambda</span> f: f.startswith(<span class="string">"mask_rcnn"</span>), checkpoints)</div><div class="line">        checkpoints = sorted(checkpoints)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checkpoints:</div><div class="line">            <span class="keyword">return</span> dir_name, <span class="keyword">None</span></div><div class="line">        checkpoint = os.path.join(dir_name, checkpoints[<span class="number">-1</span>])</div><div class="line">        <span class="keyword">return</span> dir_name, checkpoint</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_weights</span><span class="params">(self, filepath, by_name=False, exclude=None)</span>:</span></div><div class="line">        <span class="string">"""Modified version of the correspoding Keras function with</span></div><div class="line">        the addition of multi-GPU support and the ability to exclude</div><div class="line">        some layers from loading.</div><div class="line">        exlude: list of layer names to excluce</div><div class="line">        """</div><div class="line">        <span class="keyword">import</span> h5py</div><div class="line">        <span class="keyword">from</span> keras.engine <span class="keyword">import</span> topology</div><div class="line"></div><div class="line">        <span class="keyword">if</span> exclude:</div><div class="line">            by_name = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> h5py <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> ImportError(<span class="string">'`load_weights` requires h5py.'</span>)</div><div class="line">        f = h5py.File(filepath, mode=<span class="string">'r'</span>)</div><div class="line">        <span class="keyword">if</span> <span class="string">'layer_names'</span> <span class="keyword">not</span> <span class="keyword">in</span> f.attrs <span class="keyword">and</span> <span class="string">'model_weights'</span> <span class="keyword">in</span> f:</div><div class="line">            f = f[<span class="string">'model_weights'</span>]</div><div class="line"></div><div class="line">        <span class="comment"># In multi-GPU training, we wrap the model. Get layers</span></div><div class="line">        <span class="comment"># of the inner model because they have the weights.</span></div><div class="line">        keras_model = self.keras_model</div><div class="line">        layers = keras_model.inner_model.layers <span class="keyword">if</span> hasattr(keras_model, <span class="string">"inner_model"</span>)\</div><div class="line">            <span class="keyword">else</span> keras_model.layers</div><div class="line"></div><div class="line">        <span class="comment"># Exclude some layers</span></div><div class="line">        <span class="keyword">if</span> exclude:</div><div class="line">            layers = filter(<span class="keyword">lambda</span> l: l.name <span class="keyword">not</span> <span class="keyword">in</span> exclude, layers)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> by_name:</div><div class="line">            topology.load_weights_from_hdf5_group_by_name(f, layers)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            topology.load_weights_from_hdf5_group(f, layers)</div><div class="line">        <span class="keyword">if</span> hasattr(f, <span class="string">'close'</span>):</div><div class="line">            f.close()</div><div class="line"></div><div class="line">        <span class="comment"># Update the log directory</span></div><div class="line">        self.set_log_dir(filepath)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_imagenet_weights</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Downloads ImageNet trained weights from Keras.</span></div><div class="line">        Returns path to weights file.</div><div class="line">        """</div><div class="line">        <span class="keyword">from</span> keras.utils.data_utils <span class="keyword">import</span> get_file</div><div class="line">        TF_WEIGHTS_PATH_NO_TOP = <span class="string">'https://github.com/fchollet/deep-learning-models/'</span>\</div><div class="line">                                 <span class="string">'releases/download/v0.2/'</span>\</div><div class="line">                                 <span class="string">'resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'</span></div><div class="line">        weights_path = get_file(<span class="string">'resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'</span>,</div><div class="line">                                TF_WEIGHTS_PATH_NO_TOP,</div><div class="line">                                cache_subdir=<span class="string">'models'</span>,</div><div class="line">                                md5_hash=<span class="string">'a268eb855778b3df3c7506639542a6af'</span>)</div><div class="line">        <span class="keyword">return</span> weights_path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compile</span><span class="params">(self, learning_rate, momentum)</span>:</span></div><div class="line">        <span class="string">"""Gets the model ready for training. Adds losses, regularization, and</span></div><div class="line">        metrics. Then calls the Keras compile() function.</div><div class="line">        """</div><div class="line">        <span class="comment"># Optimizer object</span></div><div class="line">        optimizer = keras.optimizers.SGD(lr=learning_rate, momentum=momentum,</div><div class="line">                                         clipnorm=self.config.GRADIENT_CLIP_NORM)</div><div class="line">        <span class="comment"># Add Losses</span></div><div class="line">        <span class="comment"># First, clear previously set losses to avoid duplication</span></div><div class="line">        self.keras_model._losses = []</div><div class="line">        self.keras_model._per_input_losses = &#123;&#125;</div><div class="line">        loss_names = [<span class="string">"rpn_class_loss"</span>, <span class="string">"rpn_bbox_loss"</span>,</div><div class="line">                      <span class="string">"mrcnn_class_loss"</span>, <span class="string">"mrcnn_bbox_loss"</span>, <span class="string">"mrcnn_mask_loss"</span>]</div><div class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> loss_names:</div><div class="line">            layer = self.keras_model.get_layer(name)</div><div class="line">            <span class="keyword">if</span> layer.output <span class="keyword">in</span> self.keras_model.losses:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            self.keras_model.add_loss(</div><div class="line">                tf.reduce_mean(layer.output, keep_dims=<span class="keyword">True</span>))</div><div class="line"></div><div class="line">        <span class="comment"># Add L2 Regularization</span></div><div class="line">        <span class="comment"># Skip gamma and beta weights of batch normalization layers.</span></div><div class="line">        reg_losses = [keras.regularizers.l2(self.config.WEIGHT_DECAY)(w) / tf.cast(tf.size(w), tf.float32)</div><div class="line">                      <span class="keyword">for</span> w <span class="keyword">in</span> self.keras_model.trainable_weights</div><div class="line">                      <span class="keyword">if</span> <span class="string">'gamma'</span> <span class="keyword">not</span> <span class="keyword">in</span> w.name <span class="keyword">and</span> <span class="string">'beta'</span> <span class="keyword">not</span> <span class="keyword">in</span> w.name]</div><div class="line">        self.keras_model.add_loss(tf.add_n(reg_losses))</div><div class="line"></div><div class="line">        <span class="comment"># Compile</span></div><div class="line">        self.keras_model.compile(optimizer=optimizer, loss=[</div><div class="line">                                 <span class="keyword">None</span>] * len(self.keras_model.outputs))</div><div class="line"></div><div class="line">        <span class="comment"># Add metrics for losses</span></div><div class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> loss_names:</div><div class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> self.keras_model.metrics_names:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            layer = self.keras_model.get_layer(name)</div><div class="line">            self.keras_model.metrics_names.append(name)</div><div class="line">            self.keras_model.metrics_tensors.append(tf.reduce_mean(</div><div class="line">                layer.output, keep_dims=<span class="keyword">True</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_trainable</span><span class="params">(self, layer_regex, keras_model=None, indent=<span class="number">0</span>, verbose=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">"""Sets model layers as trainable if their names match</span></div><div class="line">        the given regular expression.</div><div class="line">        """</div><div class="line">        <span class="comment"># Print message on the first call (but not on recursive calls)</span></div><div class="line">        <span class="keyword">if</span> verbose &gt; <span class="number">0</span> <span class="keyword">and</span> keras_model <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            log(<span class="string">"Selecting layers to train"</span>)</div><div class="line"></div><div class="line">        keras_model = keras_model <span class="keyword">or</span> self.keras_model</div><div class="line"></div><div class="line">        <span class="comment"># In multi-GPU training, we wrap the model. Get layers</span></div><div class="line">        <span class="comment"># of the inner model because they have the weights.</span></div><div class="line">        layers = keras_model.inner_model.layers <span class="keyword">if</span> hasattr(keras_model, <span class="string">"inner_model"</span>)\</div><div class="line">            <span class="keyword">else</span> keras_model.layers</div><div class="line"></div><div class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> layers:</div><div class="line">            <span class="comment"># Is the layer a model?</span></div><div class="line">            <span class="keyword">if</span> layer.__class__.__name__ == <span class="string">'Model'</span>:</div><div class="line">                print(<span class="string">"In model: "</span>, layer.name)</div><div class="line">                self.set_trainable(</div><div class="line">                    layer_regex, keras_model=layer, indent=indent + <span class="number">4</span>)</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> layer.weights:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="comment"># Is it trainable?</span></div><div class="line">            trainable = bool(re.fullmatch(layer_regex, layer.name))</div><div class="line">            <span class="comment"># Update layer. If layer is a container, update inner layer.</span></div><div class="line">            <span class="keyword">if</span> layer.__class__.__name__ == <span class="string">'TimeDistributed'</span>:</div><div class="line">                layer.layer.trainable = trainable</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                layer.trainable = trainable</div><div class="line">            <span class="comment"># Print trainble layer names</span></div><div class="line">            <span class="keyword">if</span> trainable <span class="keyword">and</span> verbose &gt; <span class="number">0</span>:</div><div class="line">                log(<span class="string">"&#123;&#125;&#123;:20&#125;   (&#123;&#125;)"</span>.format(<span class="string">" "</span> * indent, layer.name,</div><div class="line">                                            layer.__class__.__name__))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_log_dir</span><span class="params">(self, model_path=None)</span>:</span></div><div class="line">        <span class="string">"""Sets the model log directory and epoch counter.</span></div><div class="line"></div><div class="line">        model_path: If None, or a format different from what this code uses</div><div class="line">            then set a new log directory and start epochs from 0. Otherwise,</div><div class="line">            extract the log directory and the epoch counter from the file</div><div class="line">            name.</div><div class="line">        """</div><div class="line">        <span class="comment"># Set date and epoch counter as if starting a new model</span></div><div class="line">        self.epoch = <span class="number">0</span></div><div class="line">        now = datetime.datetime.now()</div><div class="line"></div><div class="line">        <span class="comment"># If we have a model path with date and epochs use them</span></div><div class="line">        <span class="keyword">if</span> model_path:</div><div class="line">            <span class="comment"># Continue from we left of. Get epoch and date from the file name</span></div><div class="line">            <span class="comment"># A sample model path might look like:</span></div><div class="line">            <span class="comment"># /path/to/logs/coco20171029T2315/mask_rcnn_coco_0001.h5</span></div><div class="line">            regex = <span class="string">r".*/\w+(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)T(\d&#123;2&#125;)(\d&#123;2&#125;)/mask\_rcnn\_\w+(\d&#123;4&#125;)\.h5"</span></div><div class="line">            m = re.match(regex, model_path)</div><div class="line">            <span class="keyword">if</span> m:</div><div class="line">                now = datetime.datetime(int(m.group(<span class="number">1</span>)), int(m.group(<span class="number">2</span>)), int(m.group(<span class="number">3</span>)),</div><div class="line">                                        int(m.group(<span class="number">4</span>)), int(m.group(<span class="number">5</span>)))</div><div class="line">                self.epoch = int(m.group(<span class="number">6</span>)) + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="comment"># Directory for training logs</span></div><div class="line">        self.log_dir = os.path.join(self.model_dir, <span class="string">"&#123;&#125;&#123;:%Y%m%dT%H%M&#125;"</span>.format(</div><div class="line">            self.config.NAME.lower(), now))</div><div class="line"></div><div class="line">        <span class="comment"># Path to save after each epoch. Include placeholders that get filled by Keras.</span></div><div class="line">        self.checkpoint_path = os.path.join(self.log_dir, <span class="string">"mask_rcnn_&#123;&#125;_*epoch*.h5"</span>.format(</div><div class="line">            self.config.NAME.lower()))</div><div class="line">        self.checkpoint_path = self.checkpoint_path.replace(</div><div class="line">            <span class="string">"*epoch*"</span>, <span class="string">"&#123;epoch:04d&#125;"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, train_dataset, val_dataset, learning_rate, epochs, layers,</span></span></div><div class="line">              augmentation=None):</div><div class="line">        <span class="string">"""Train the model.</span></div><div class="line">        train_dataset, val_dataset: Training and validation Dataset objects.</div><div class="line">        learning_rate: The learning rate to train with</div><div class="line">        epochs: Number of training epochs. Note that previous training epochs</div><div class="line">                are considered to be done alreay, so this actually determines</div><div class="line">                the epochs to train in total rather than in this particaular</div><div class="line">                call.</div><div class="line">        layers: Allows selecting wich layers to train. It can be:</div><div class="line">            - A regular expression to match layer names to train</div><div class="line">            - One of these predefined values:</div><div class="line">              heaads: The RPN, classifier and mask heads of the network</div><div class="line">              all: All the layers</div><div class="line">              3+: Train Resnet stage 3 and up</div><div class="line">              4+: Train Resnet stage 4 and up</div><div class="line">              5+: Train Resnet stage 5 and up</div><div class="line">        augmentation: Optional. An imgaug (https://github.com/aleju/imgaug) augmentation.</div><div class="line">            For example, passing imgaug.augmenters.Fliplr(0.5) flips images</div><div class="line">            right/left 50% of the time.</div><div class="line">        """</div><div class="line">        <span class="keyword">assert</span> self.mode == <span class="string">"training"</span>, <span class="string">"Create model in training mode."</span></div><div class="line"></div><div class="line">        <span class="comment"># Pre-defined layer regular expressions</span></div><div class="line">        layer_regex = &#123;</div><div class="line">            <span class="comment"># all layers but the backbone</span></div><div class="line">            <span class="string">"heads"</span>: <span class="string">r"(mrcnn\_.*)|(rpn\_.*)|(fpn\_.*)"</span>,</div><div class="line">            <span class="comment"># From a specific Resnet stage and up</span></div><div class="line">            <span class="string">"3+"</span>: <span class="string">r"(res3.*)|(bn3.*)|(res4.*)|(bn4.*)|(res5.*)|(bn5.*)|(mrcnn\_.*)|(rpn\_.*)|(fpn\_.*)"</span>,</div><div class="line">            <span class="string">"4+"</span>: <span class="string">r"(res4.*)|(bn4.*)|(res5.*)|(bn5.*)|(mrcnn\_.*)|(rpn\_.*)|(fpn\_.*)"</span>,</div><div class="line">            <span class="string">"5+"</span>: <span class="string">r"(res5.*)|(bn5.*)|(mrcnn\_.*)|(rpn\_.*)|(fpn\_.*)"</span>,</div><div class="line">            <span class="comment"># All layers</span></div><div class="line">            <span class="string">"all"</span>: <span class="string">".*"</span>,</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> layers <span class="keyword">in</span> layer_regex.keys():</div><div class="line">            layers = layer_regex[layers]</div><div class="line"></div><div class="line">        <span class="comment"># Data generators</span></div><div class="line">        train_generator = data_generator(train_dataset, self.config, shuffle=<span class="keyword">True</span>,</div><div class="line">                                         augmentation=augmentation,</div><div class="line">                                         batch_size=self.config.BATCH_SIZE)</div><div class="line">        val_generator = data_generator(val_dataset, self.config, shuffle=<span class="keyword">True</span>,</div><div class="line">                                       batch_size=self.config.BATCH_SIZE)</div><div class="line"></div><div class="line">        <span class="comment"># Callbacks</span></div><div class="line">        callbacks = [</div><div class="line">            keras.callbacks.TensorBoard(log_dir=self.log_dir,</div><div class="line">                                        histogram_freq=<span class="number">0</span>, write_graph=<span class="keyword">True</span>, write_images=<span class="keyword">False</span>),</div><div class="line">            keras.callbacks.ModelCheckpoint(self.checkpoint_path,</div><div class="line">                                            verbose=<span class="number">0</span>, save_weights_only=<span class="keyword">True</span>),</div><div class="line">        ]</div><div class="line"></div><div class="line">        <span class="comment"># Train</span></div><div class="line">        log(<span class="string">"\nStarting at epoch &#123;&#125;. LR=&#123;&#125;\n"</span>.format(self.epoch, learning_rate))</div><div class="line">        log(<span class="string">"Checkpoint Path: &#123;&#125;"</span>.format(self.checkpoint_path))</div><div class="line">        self.set_trainable(layers)</div><div class="line">        self.compile(learning_rate, self.config.LEARNING_MOMENTUM)</div><div class="line"></div><div class="line">        <span class="comment"># Work-around for Windows: Keras fails on Windows when using</span></div><div class="line">        <span class="comment"># multiprocessing workers. See discussion here:</span></div><div class="line">        <span class="comment"># https://github.com/matterport/Mask_RCNN/issues/13#issuecomment-353124009</span></div><div class="line">        <span class="keyword">if</span> os.name <span class="keyword">is</span> <span class="string">'nt'</span>:</div><div class="line">            workers = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            workers = multiprocessing.cpu_count()</div><div class="line"></div><div class="line">        self.keras_model.fit_generator(</div><div class="line">            train_generator,</div><div class="line">            initial_epoch=self.epoch,</div><div class="line">            epochs=epochs,</div><div class="line">            steps_per_epoch=self.config.STEPS_PER_EPOCH,</div><div class="line">            callbacks=callbacks,</div><div class="line">            validation_data=val_generator,</div><div class="line">            validation_steps=self.config.VALIDATION_STEPS,</div><div class="line">            max_queue_size=<span class="number">100</span>,</div><div class="line">            workers=workers,</div><div class="line">            use_multiprocessing=<span class="keyword">True</span>,</div><div class="line">        )</div><div class="line">        self.epoch = max(self.epoch, epochs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mold_inputs</span><span class="params">(self, images)</span>:</span></div><div class="line">        <span class="string">"""Takes a list of images and modifies them to the format expected</span></div><div class="line">        as an input to the neural network.</div><div class="line">        images: List of image matricies [height,width,depth]. Images can have</div><div class="line">            different sizes.</div><div class="line"></div><div class="line">        Returns 3 Numpy matricies:</div><div class="line">        molded_images: [N, h, w, 3]. Images resized and normalized.</div><div class="line">        image_metas: [N, length of meta data]. Details about each image.</div><div class="line">        windows: [N, (y1, x1, y2, x2)]. The portion of the image that has the</div><div class="line">            original image (padding excluded).</div><div class="line">        """</div><div class="line">        molded_images = []</div><div class="line">        image_metas = []</div><div class="line">        windows = []</div><div class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images:</div><div class="line">            <span class="comment"># Resize image to fit the model expected size</span></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> move resizing to mold_image()</span></div><div class="line">            molded_image, window, scale, padding = utils.resize_image(</div><div class="line">                image,</div><div class="line">                min_dim=self.config.IMAGE_MIN_DIM,</div><div class="line">                max_dim=self.config.IMAGE_MAX_DIM,</div><div class="line">                padding=self.config.IMAGE_PADDING)</div><div class="line">            molded_image = mold_image(molded_image, self.config)</div><div class="line">            <span class="comment"># Build image_meta</span></div><div class="line">            image_meta = compose_image_meta(</div><div class="line">                <span class="number">0</span>, image.shape, window,</div><div class="line">                np.zeros([self.config.NUM_CLASSES], dtype=np.int32))</div><div class="line">            <span class="comment"># Append</span></div><div class="line">            molded_images.append(molded_image)</div><div class="line">            windows.append(window)</div><div class="line">            image_metas.append(image_meta)</div><div class="line">        <span class="comment"># Pack into arrays</span></div><div class="line">        molded_images = np.stack(molded_images)</div><div class="line">        image_metas = np.stack(image_metas)</div><div class="line">        windows = np.stack(windows)</div><div class="line">        <span class="keyword">return</span> molded_images, image_metas, windows</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unmold_detections</span><span class="params">(self, detections, mrcnn_mask, image_shape, window)</span>:</span></div><div class="line">        <span class="string">"""Reformats the detections of one image from the format of the neural</span></div><div class="line">        network output to a format suitable for use in the rest of the</div><div class="line">        application.</div><div class="line"></div><div class="line">        detections: [N, (y1, x1, y2, x2, class_id, score)]</div><div class="line">        mrcnn_mask: [N, height, width, num_classes]</div><div class="line">        image_shape: [height, width, depth] Original size of the image before resizing</div><div class="line">        window: [y1, x1, y2, x2] Box in the image where the real image is</div><div class="line">                excluding the padding.</div><div class="line"></div><div class="line">        Returns:</div><div class="line">        boxes: [N, (y1, x1, y2, x2)] Bounding boxes in pixels</div><div class="line">        class_ids: [N] Integer class IDs for each bounding box</div><div class="line">        scores: [N] Float probability scores of the class_id</div><div class="line">        masks: [height, width, num_instances] Instance masks</div><div class="line">        """</div><div class="line">        <span class="comment"># How many detections do we have?</span></div><div class="line">        <span class="comment"># Detections array is padded with zeros. Find the first class_id == 0.</span></div><div class="line">        zero_ix = np.where(detections[:, <span class="number">4</span>] == <span class="number">0</span>)[<span class="number">0</span>]</div><div class="line">        N = zero_ix[<span class="number">0</span>] <span class="keyword">if</span> zero_ix.shape[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> detections.shape[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="comment"># Extract boxes, class_ids, scores, and class-specific masks</span></div><div class="line">        boxes = detections[:N, :<span class="number">4</span>]</div><div class="line">        class_ids = detections[:N, <span class="number">4</span>].astype(np.int32)</div><div class="line">        scores = detections[:N, <span class="number">5</span>]</div><div class="line">        masks = mrcnn_mask[np.arange(N), :, :, class_ids]</div><div class="line"></div><div class="line">        <span class="comment"># Compute scale and shift to translate coordinates to image domain.</span></div><div class="line">        h_scale = image_shape[<span class="number">0</span>] / (window[<span class="number">2</span>] - window[<span class="number">0</span>])</div><div class="line">        w_scale = image_shape[<span class="number">1</span>] / (window[<span class="number">3</span>] - window[<span class="number">1</span>])</div><div class="line">        scale = min(h_scale, w_scale)</div><div class="line">        shift = window[:<span class="number">2</span>]  <span class="comment"># y, x</span></div><div class="line">        scales = np.array([scale, scale, scale, scale])</div><div class="line">        shifts = np.array([shift[<span class="number">0</span>], shift[<span class="number">1</span>], shift[<span class="number">0</span>], shift[<span class="number">1</span>]])</div><div class="line"></div><div class="line">        <span class="comment"># Translate bounding boxes to image domain</span></div><div class="line">        boxes = np.multiply(boxes - shifts, scales).astype(np.int32)</div><div class="line"></div><div class="line">        <span class="comment"># Filter out detections with zero area. Often only happens in early</span></div><div class="line">        <span class="comment"># stages of training when the network weights are still a bit random.</span></div><div class="line">        exclude_ix = np.where(</div><div class="line">            (boxes[:, <span class="number">2</span>] - boxes[:, <span class="number">0</span>]) * (boxes[:, <span class="number">3</span>] - boxes[:, <span class="number">1</span>]) &lt;= <span class="number">0</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> exclude_ix.shape[<span class="number">0</span>] &gt; <span class="number">0</span>:</div><div class="line">            boxes = np.delete(boxes, exclude_ix, axis=<span class="number">0</span>)</div><div class="line">            class_ids = np.delete(class_ids, exclude_ix, axis=<span class="number">0</span>)</div><div class="line">            scores = np.delete(scores, exclude_ix, axis=<span class="number">0</span>)</div><div class="line">            masks = np.delete(masks, exclude_ix, axis=<span class="number">0</span>)</div><div class="line">            N = class_ids.shape[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="comment"># Resize masks to original image size and set boundary threshold.</span></div><div class="line">        full_masks = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</div><div class="line">            <span class="comment"># Convert neural network mask to full size mask</span></div><div class="line">            full_mask = utils.unmold_mask(masks[i], boxes[i], image_shape)</div><div class="line">            full_masks.append(full_mask)</div><div class="line">        full_masks = np.stack(full_masks, axis=<span class="number">-1</span>)\</div><div class="line">            <span class="keyword">if</span> full_masks <span class="keyword">else</span> np.empty((<span class="number">0</span>,) + masks.shape[<span class="number">1</span>:<span class="number">3</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> boxes, class_ids, scores, full_masks</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(self, images, verbose=<span class="number">0</span>)</span>:</span></div><div class="line">        <span class="string">"""Runs the detection pipeline.</span></div><div class="line"></div><div class="line">        images: List of images, potentially of different sizes.</div><div class="line"></div><div class="line">        Returns a list of dicts, one dict per image. The dict contains:</div><div class="line">        rois: [N, (y1, x1, y2, x2)] detection bounding boxes</div><div class="line">        class_ids: [N] int class IDs</div><div class="line">        scores: [N] float probability scores for the class IDs</div><div class="line">        masks: [H, W, N] instance binary masks</div><div class="line">        """</div><div class="line">        <span class="keyword">assert</span> self.mode == <span class="string">"inference"</span>, <span class="string">"Create model in inference mode."</span></div><div class="line">        <span class="keyword">assert</span> len(</div><div class="line">            images) == self.config.BATCH_SIZE, <span class="string">"len(images) must be equal to BATCH_SIZE"</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> verbose:</div><div class="line">            log(<span class="string">"Processing &#123;&#125; images"</span>.format(len(images)))</div><div class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> images:</div><div class="line">                log(<span class="string">"image"</span>, image)</div><div class="line">        <span class="comment"># Mold inputs to format expected by the neural network</span></div><div class="line">        molded_images, image_metas, windows = self.mold_inputs(images)</div><div class="line">        <span class="keyword">if</span> verbose:</div><div class="line">            log(<span class="string">"molded_images"</span>, molded_images)</div><div class="line">            log(<span class="string">"image_metas"</span>, image_metas)</div><div class="line">        <span class="comment"># Run object detection</span></div><div class="line">        detections, mrcnn_class, mrcnn_bbox, mrcnn_mask, \</div><div class="line">            rois, rpn_class, rpn_bbox =\</div><div class="line">            self.keras_model.predict([molded_images, image_metas], verbose=<span class="number">0</span>)</div><div class="line">        <span class="comment"># Process detections</span></div><div class="line">        results = []</div><div class="line">        <span class="keyword">for</span> i, image <span class="keyword">in</span> enumerate(images):</div><div class="line">            final_rois, final_class_ids, final_scores, final_masks =\</div><div class="line">                self.unmold_detections(detections[i], mrcnn_mask[i],</div><div class="line">                                       image.shape, windows[i])</div><div class="line">            results.append(&#123;</div><div class="line">                <span class="string">"rois"</span>: final_rois,</div><div class="line">                <span class="string">"class_ids"</span>: final_class_ids,</div><div class="line">                <span class="string">"scores"</span>: final_scores,</div><div class="line">                <span class="string">"masks"</span>: final_masks,</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">return</span> results</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ancestor</span><span class="params">(self, tensor, name, checked=None)</span>:</span></div><div class="line">        <span class="string">"""Finds the ancestor of a TF tensor in the computation graph.</span></div><div class="line">        tensor: TensorFlow symbolic tensor.</div><div class="line">        name: Name of ancestor tensor to find</div><div class="line">        checked: For internal use. A list of tensors that were already</div><div class="line">                 searched to avoid loops in traversing the graph.</div><div class="line">        """</div><div class="line">        checked = checked <span class="keyword">if</span> checked <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> []</div><div class="line">        <span class="comment"># Put a limit on how deep we go to avoid very long loops</span></div><div class="line">        <span class="keyword">if</span> len(checked) &gt; <span class="number">500</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="comment"># Convert name to a regex and allow matching a number prefix</span></div><div class="line">        <span class="comment"># because Keras adds them automatically</span></div><div class="line">        <span class="keyword">if</span> isinstance(name, str):</div><div class="line">            name = re.compile(name.replace(<span class="string">"/"</span>, <span class="string">r"(\_\d+)*/"</span>))</div><div class="line"></div><div class="line">        parents = tensor.op.inputs</div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> parents:</div><div class="line">            <span class="keyword">if</span> p <span class="keyword">in</span> checked:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> bool(re.fullmatch(name, p.name)):</div><div class="line">                <span class="keyword">return</span> p</div><div class="line">            checked.append(p)</div><div class="line">            a = self.ancestor(p, name, checked)</div><div class="line">            <span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> a</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_trainable_layer</span><span class="params">(self, layer)</span>:</span></div><div class="line">        <span class="string">"""If a layer is encapsulated by another layer, this function</span></div><div class="line">        digs through the encapsulation and returns the layer that holds</div><div class="line">        the weights.</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> layer.__class__.__name__ == <span class="string">'TimeDistributed'</span>:</div><div class="line">            <span class="keyword">return</span> self.find_trainable_layer(layer.layer)</div><div class="line">        <span class="keyword">return</span> layer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_trainable_layers</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Returns a list of layers that have weights."""</span></div><div class="line">        layers = []</div><div class="line">        <span class="comment"># Loop through all layers</span></div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> self.keras_model.layers:</div><div class="line">            <span class="comment"># If layer is a wrapper, find inner trainable layer</span></div><div class="line">            l = self.find_trainable_layer(l)</div><div class="line">            <span class="comment"># Include layer if it has weights</span></div><div class="line">            <span class="keyword">if</span> l.get_weights():</div><div class="line">                layers.append(l)</div><div class="line">        <span class="keyword">return</span> layers</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_graph</span><span class="params">(self, images, outputs)</span>:</span></div><div class="line">        <span class="string">"""Runs a sub-set of the computation graph that computes the given</span></div><div class="line">        outputs.</div><div class="line"></div><div class="line">        outputs: List of tuples (name, tensor) to compute. The tensors are</div><div class="line">            symbolic TensorFlow tensors and the names are for easy tracking.</div><div class="line"></div><div class="line">        Returns an ordered dict of results. Keys are the names received in the</div><div class="line">        input and values are Numpy arrays.</div><div class="line">        """</div><div class="line">        model = self.keras_model</div><div class="line"></div><div class="line">        <span class="comment"># Organize desired outputs into an ordered dict</span></div><div class="line">        outputs = OrderedDict(outputs)</div><div class="line">        <span class="keyword">for</span> o <span class="keyword">in</span> outputs.values():</div><div class="line">            <span class="keyword">assert</span> o <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment"># Build a Keras function to run parts of the computation graph</span></div><div class="line">        inputs = model.inputs</div><div class="line">        <span class="keyword">if</span> model.uses_learning_phase <span class="keyword">and</span> <span class="keyword">not</span> isinstance(K.learning_phase(), int):</div><div class="line">            inputs += [K.learning_phase()]</div><div class="line">        kf = K.function(model.inputs, list(outputs.values()))</div><div class="line"></div><div class="line">        <span class="comment"># Run inference</span></div><div class="line">        molded_images, image_metas, windows = self.mold_inputs(images)</div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> support training mode?</span></div><div class="line">        <span class="comment"># if TEST_MODE == "training":</span></div><div class="line">        <span class="comment">#     model_in = [molded_images, image_metas,</span></div><div class="line">        <span class="comment">#                 target_rpn_match, target_rpn_bbox,</span></div><div class="line">        <span class="comment">#                 gt_boxes, gt_masks]</span></div><div class="line">        <span class="comment">#     if not config.USE_RPN_ROIS:</span></div><div class="line">        <span class="comment">#         model_in.append(target_rois)</span></div><div class="line">        <span class="comment">#     if model.uses_learning_phase and not isinstance(K.learning_phase(), int):</span></div><div class="line">        <span class="comment">#         model_in.append(1.)</span></div><div class="line">        <span class="comment">#     outputs_np = kf(model_in)</span></div><div class="line">        <span class="comment"># else:</span></div><div class="line"></div><div class="line">        model_in = [molded_images, image_metas]</div><div class="line">        <span class="keyword">if</span> model.uses_learning_phase <span class="keyword">and</span> <span class="keyword">not</span> isinstance(K.learning_phase(), int):</div><div class="line">            model_in.append(<span class="number">0.</span>)</div><div class="line">        outputs_np = kf(model_in)</div><div class="line"></div><div class="line">        <span class="comment"># Pack the generated Numpy arrays into a a dict and log the results.</span></div><div class="line">        outputs_np = OrderedDict([(k, v)</div><div class="line">                                  <span class="keyword">for</span> k, v <span class="keyword">in</span> zip(outputs.keys(), outputs_np)])</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> outputs_np.items():</div><div class="line">            log(k, v)</div><div class="line">        <span class="keyword">return</span> outputs_np</div></pre></td></tr></table></figure><ol><li>工具</li></ol><p>一個是輸出log的function，另一個是去修改batch norm，畢竟這repo是2 or 4，太小了會造成反效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text, array=None)</span>:</span></div><div class="line">    <span class="string">"""Prints a text message. And, optionally, if a Numpy array is provided it</span></div><div class="line">    prints it's shape, min, and max values.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> array <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        text = text.ljust(<span class="number">25</span>)</div><div class="line">        text += (<span class="string">"shape: &#123;:20&#125;  min: &#123;:10.5f&#125;  max: &#123;:10.5f&#125;"</span>.format(</div><div class="line">            str(array.shape),</div><div class="line">            array.min() <span class="keyword">if</span> array.size <span class="keyword">else</span> <span class="string">""</span>,</div><div class="line">            array.max() <span class="keyword">if</span> array.size <span class="keyword">else</span> <span class="string">""</span>))</div><div class="line">    print(text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchNorm</span><span class="params">(KL.BatchNormalization)</span>:</span></div><div class="line">    <span class="string">"""Batch Normalization class. Subclasses the Keras BN class and</span></div><div class="line">    hardcodes training=False so the BN layer doesn't update</div><div class="line">    during training.</div><div class="line"></div><div class="line">    Batch normalization has a negative effect on training if batches are small</div><div class="line">    so we disable it here.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, training=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> super(self.__class__, self).call(inputs, training=<span class="keyword">False</span>)</div></pre></td></tr></table></figure><p>4.resnet graph</p><p>Resnet All</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet_graph</span><span class="params">(input_image, architecture, stage5=False)</span>:</span>  </div><div class="line">    <span class="keyword">assert</span> architecture <span class="keyword">in</span> [<span class="string">"resnet50"</span>, <span class="string">"resnet101"</span>]  </div><div class="line">    <span class="comment"># Stage 1  </span></div><div class="line">    x = KL.ZeroPadding2D((<span class="number">3</span>, <span class="number">3</span>))(input_image)  </div><div class="line">    x = KL.Conv2D(<span class="number">64</span>, (<span class="number">7</span>, <span class="number">7</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), name=<span class="string">'conv1'</span>, use_bias=<span class="keyword">True</span>)(x)  </div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=<span class="string">'bn_conv1'</span>)(x)  </div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>)(x)  </div><div class="line">    C1 = x = KL.MaxPooling2D((<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">"same"</span>)(x)  </div><div class="line">    <span class="comment"># Stage 2  </span></div><div class="line">    x = conv_block(x, <span class="number">3</span>, [<span class="number">64</span>, <span class="number">64</span>, <span class="number">256</span>], stage=<span class="number">2</span>, block=<span class="string">'a'</span>, strides=(<span class="number">1</span>, <span class="number">1</span>))  </div><div class="line">    x = identity_block(x, <span class="number">3</span>, [<span class="number">64</span>, <span class="number">64</span>, <span class="number">256</span>], stage=<span class="number">2</span>, block=<span class="string">'b'</span>)  </div><div class="line">    C2 = x = identity_block(x, <span class="number">3</span>, [<span class="number">64</span>, <span class="number">64</span>, <span class="number">256</span>], stage=<span class="number">2</span>, block=<span class="string">'c'</span>)  </div><div class="line">    <span class="comment"># Stage 3  </span></div><div class="line">    x = conv_block(x, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'a'</span>)  </div><div class="line">    x = identity_block(x, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'b'</span>)  </div><div class="line">    x = identity_block(x, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'c'</span>)  </div><div class="line">    C3 = x = identity_block(x, <span class="number">3</span>, [<span class="number">128</span>, <span class="number">128</span>, <span class="number">512</span>], stage=<span class="number">3</span>, block=<span class="string">'d'</span>)  </div><div class="line">    <span class="comment"># Stage 4  </span></div><div class="line">    x = conv_block(x, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=<span class="string">'a'</span>)  </div><div class="line">    block_count = &#123;<span class="string">"resnet50"</span>: <span class="number">5</span>, <span class="string">"resnet101"</span>: <span class="number">22</span>&#125;[architecture]  </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(block_count):  </div><div class="line">        x = identity_block(x, <span class="number">3</span>, [<span class="number">256</span>, <span class="number">256</span>, <span class="number">1024</span>], stage=<span class="number">4</span>, block=chr(<span class="number">98</span> + i))  </div><div class="line">    C4 = x  </div><div class="line">    <span class="comment"># Stage 5  </span></div><div class="line">    <span class="keyword">if</span> stage5:  </div><div class="line">        x = conv_block(x, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'a'</span>)  </div><div class="line">        x = identity_block(x, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'b'</span>)  </div><div class="line">        C5 = x = identity_block(x, <span class="number">3</span>, [<span class="number">512</span>, <span class="number">512</span>, <span class="number">2048</span>], stage=<span class="number">5</span>, block=<span class="string">'c'</span>)  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        C5 = <span class="keyword">None</span>  </div><div class="line">    <span class="keyword">return</span> [C1, C2, C3, C4, C5]</div></pre></td></tr></table></figure><p>Convolution</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">ef conv_block(input_tensor, kernel_size, filters, stage, block,</div><div class="line">               strides=(<span class="number">2</span>, <span class="number">2</span>), use_bias=<span class="keyword">True</span>):</div><div class="line">    <span class="string">"""conv_block is the block that has a conv layer at shortcut</span></div><div class="line">    # Arguments</div><div class="line">        input_tensor: input tensor</div><div class="line">        kernel_size: defualt 3, the kernel size of middle conv layer at main path</div><div class="line">        filters: list of integers, the nb_filters of 3 conv layer at main path</div><div class="line">        stage: integer, current stage label, used for generating layer names</div><div class="line">        block: 'a','b'..., current block label, used for generating layer names</div><div class="line">    Note that from stage 3, the first conv layer at main path is with subsample=(2,2)</div><div class="line">    And the shortcut should have subsample=(2,2) as well</div><div class="line">    """</div><div class="line">    nb_filter1, nb_filter2, nb_filter3 = filters</div><div class="line">    conv_name_base = <span class="string">'res'</span> + str(stage) + block + <span class="string">'_branch'</span></div><div class="line">    bn_name_base = <span class="string">'bn'</span> + str(stage) + block + <span class="string">'_branch'</span></div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter1, (<span class="number">1</span>, <span class="number">1</span>), strides=strides,</div><div class="line">                  name=conv_name_base + <span class="string">'2a'</span>, use_bias=use_bias)(input_tensor)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2a'</span>)(x)</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>)(x)</div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter2, (kernel_size, kernel_size), padding=<span class="string">'same'</span>,</div><div class="line">                  name=conv_name_base + <span class="string">'2b'</span>, use_bias=use_bias)(x)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2b'</span>)(x)</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>)(x)</div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter3, (<span class="number">1</span>, <span class="number">1</span>), name=conv_name_base +</div><div class="line">                  <span class="string">'2c'</span>, use_bias=use_bias)(x)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2c'</span>)(x)</div><div class="line"></div><div class="line">    shortcut = KL.Conv2D(nb_filter3, (<span class="number">1</span>, <span class="number">1</span>), strides=strides,</div><div class="line">                         name=conv_name_base + <span class="string">'1'</span>, use_bias=use_bias)(input_tensor)</div><div class="line">    shortcut = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'1'</span>)(shortcut)</div><div class="line"></div><div class="line">    x = KL.Add()([x, shortcut])</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>, name=<span class="string">'res'</span> + str(stage) + block + <span class="string">'_out'</span>)(x)</div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure><p>Identity Block</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity_block</span><span class="params">(input_tensor, kernel_size, filters, stage, block,</span></span></div><div class="line">                   use_bias=True):</div><div class="line">    <span class="string">"""The identity_block is the block that has no conv layer at shortcut</span></div><div class="line">    # Arguments</div><div class="line">        input_tensor: input tensor</div><div class="line">        kernel_size: defualt 3, the kernel size of middle conv layer at main path</div><div class="line">        filters: list of integers, the nb_filters of 3 conv layer at main path</div><div class="line">        stage: integer, current stage label, used for generating layer names</div><div class="line">        block: 'a','b'..., current block label, used for generating layer names</div><div class="line">    """</div><div class="line">    nb_filter1, nb_filter2, nb_filter3 = filters</div><div class="line">    conv_name_base = <span class="string">'res'</span> + str(stage) + block + <span class="string">'_branch'</span></div><div class="line">    bn_name_base = <span class="string">'bn'</span> + str(stage) + block + <span class="string">'_branch'</span></div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter1, (<span class="number">1</span>, <span class="number">1</span>), name=conv_name_base + <span class="string">'2a'</span>,</div><div class="line">                  use_bias=use_bias)(input_tensor)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2a'</span>)(x)</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>)(x)</div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter2, (kernel_size, kernel_size), padding=<span class="string">'same'</span>,</div><div class="line">                  name=conv_name_base + <span class="string">'2b'</span>, use_bias=use_bias)(x)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2b'</span>)(x)</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>)(x)</div><div class="line"></div><div class="line">    x = KL.Conv2D(nb_filter3, (<span class="number">1</span>, <span class="number">1</span>), name=conv_name_base + <span class="string">'2c'</span>,</div><div class="line">                  use_bias=use_bias)(x)</div><div class="line">    x = BatchNorm(axis=<span class="number">3</span>, name=bn_name_base + <span class="string">'2c'</span>)(x)</div><div class="line"></div><div class="line">    x = KL.Add()([x, input_tensor])</div><div class="line">    x = KL.Activation(<span class="string">'relu'</span>, name=<span class="string">'res'</span> + str(stage) + block + <span class="string">'_out'</span>)(x)</div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/matterport/Mask_RCNN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/matterport/Mask_RCNN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#mode
      
    
    </summary>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/categories/Segmentation/"/>
    
      <category term="Detection" scheme="https://world4jason.github.io/categories/Segmentation/Detection/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="R-CNN" scheme="https://world4jason.github.io/tags/R-CNN/"/>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/tags/Segmentation/"/>
    
      <category term="Pose Estimation" scheme="https://world4jason.github.io/tags/Pose-Estimation/"/>
    
  </entry>
  
  <entry>
    <title>Mask R-CNN</title>
    <link href="https://world4jason.github.io/2018/03/10/Mask%20R-CNN/"/>
    <id>https://world4jason.github.io/2018/03/10/Mask R-CNN/</id>
    <published>2018-03-09T18:13:59.000Z</published>
    <updated>2018-03-28T12:59:10.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15222419162572.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15144439857026.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>Mask R-CNN 利用了相當簡潔與彈性的方法進行實例分割, 主要跟 Faster R-CNN 不同的地方在於原架構有 2 個分支 </p><ol><li>Classification branch </li><li>Bounding box branch </li></ol><p>而 Mask R-CNN 的方法則是多加了另一個分支  — Mask branch。</p><h2 id="Mask-branch"><a href="#Mask-branch" class="headerlink" title="Mask branch"></a>Mask branch</h2><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h2><p>L<sub>total</sub> = L<sub>cls</sub> + L<sub>box</sub>  + L<sub>mask</sub> </p><p>L<sub>cls</sub> 跟 L<sub>box</sub>的可以參考Fast-RCNN</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">J<span class="comment">(θ)</span>=−<span class="number">1</span>m[∑mi=<span class="number">1</span>y<span class="comment">(i)</span>loghθ<span class="comment">(x(i)</span>)+<span class="comment">(1−y(i)</span>)log<span class="comment">(1−hθ(x(i)</span>))]</div></pre></td></tr></table></figure><h2 id="ROI-Alignment"><a href="#ROI-Alignment" class="headerlink" title="ROI Alignment"></a>ROI Alignment</h2><h3 id="ROI-POOLING"><a href="#ROI-POOLING" class="headerlink" title="ROI POOLING"></a>ROI POOLING</h3><p>ROI POOLING 概念如下圖所示<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15137535435975.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15137536007979.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">\m</span>athcal &#123;F_&#123;i&#125;^&#123;RoI&#125;&#125;_&#123;(u^<span class="symbol">\p</span>rime,v^<span class="symbol">\p</span>rime)&#125; = <span class="symbol">\s</span>um_&#123;(u,v)&#125;^&#123;W <span class="symbol">\t</span>imes H&#125; G(u,v;u^<span class="symbol">\p</span>rime, v^<span class="symbol">\p</span>rime|B_i) <span class="symbol">\m</span>athcal F_(u,v)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;di
      
    
    </summary>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/categories/Segmentation/"/>
    
      <category term="Detection" scheme="https://world4jason.github.io/categories/Segmentation/Detection/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="R-CNN" scheme="https://world4jason.github.io/tags/R-CNN/"/>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/tags/Segmentation/"/>
    
      <category term="Pose Estimation" scheme="https://world4jason.github.io/tags/Pose-Estimation/"/>
    
  </entry>
  
  <entry>
    <title>CapsuleNet</title>
    <link href="https://world4jason.github.io/2018/02/06/CapsuleNet/"/>
    <id>https://world4jason.github.io/2018/02/06/CapsuleNet/</id>
    <published>2018-02-06T05:53:47.000Z</published>
    <updated>2018-02-06T18:21:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GAN - 手推</title>
    <link href="https://world4jason.github.io/2018/02/04/untitled-1517723627245/"/>
    <id>https://world4jason.github.io/2018/02/04/untitled-1517723627245/</id>
    <published>2018-02-04T05:53:47.000Z</published>
    <updated>2018-03-26T14:11:15.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol><li>GAN 機率分佈</li><li>f-divergence</li><li>fenchel conjugate</li><li>GAN公式</li></ol><h1 id="GAN-機率分佈"><a href="#GAN-機率分佈" class="headerlink" title="GAN 機率分佈"></a>GAN 機率分佈</h1><p>機率質量函數(PMF) 可數-&gt;離散<br>機率密度函數(PDF) 不可數-&gt; 不可數</p><h4 id="ISSUE-如果換成凹函式呢"><a href="#ISSUE-如果換成凹函式呢" class="headerlink" title="ISSUE 如果換成凹函式呢?"></a>ISSUE 如果換成凹函式呢?</h4><p>-&gt; 大於小於對調 但生成結果好像沒差(?</p><p>—未完成 待續</p><p>\mathcal {F<em>{i}^{RoI}}</em>{(u^\prime,v^\prime)} = \sum_{(u,v)}^{W \times H} G(u,v;u^\prime, v^\prime|B<em>i) \mathcal F</em>(u,v)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;GAN 機率分佈&lt;/li&gt;
&lt;li&gt;f-divergence&lt;/li&gt;
&lt;li&gt;fenc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ICNET code Analysis</title>
    <link href="https://world4jason.github.io/2018/01/31/ICNET%20code%20Analysis/"/>
    <id>https://world4jason.github.io/2018/01/31/ICNET code Analysis/</id>
    <published>2018-01-31T06:21:27.000Z</published>
    <updated>2018-01-31T06:22:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Code" scheme="https://world4jason.github.io/categories/Code/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/tags/Segmentation/"/>
    
      <category term="Tensorflow" scheme="https://world4jason.github.io/tags/Tensorflow/"/>
    
      <category term="real-time" scheme="https://world4jason.github.io/tags/real-time/"/>
    
  </entry>
  
  <entry>
    <title>ICNET for Real-Time Semantic Segmentation on High-Resolution Images</title>
    <link href="https://world4jason.github.io/2018/01/28/ICNET-for-Real-Time-Semantic-Segmentation-on-High-Resolution-Images/"/>
    <id>https://world4jason.github.io/2018/01/28/ICNET-for-Real-Time-Semantic-Segmentation-on-High-Resolution-Images/</id>
    <published>2018-01-28T08:50:31.000Z</published>
    <updated>2018-01-31T06:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><p>Quote:<br>其實很討厭這作者的paper<br>效果都很好, 但是每次都是用matlab, 而且PSPNet作者還說training code因為公司問題不能發布, 傻眼<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172367977860.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><a href="https://www.zhihu.com/question/53356671" target="_blank" rel="external">https://www.zhihu.com/question/53356671</a></p><p>Paper<br><a href="https://arxiv.org/pdf/1704.08545.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1704.08545.pdf</a><br>Code<br><a href="https://github.com/hszhao/ICNet" target="_blank" rel="external">https://github.com/hszhao/ICNet</a><br><a href="https://github.com/aitorzip/Keras-ICNet" target="_blank" rel="external">https://github.com/aitorzip/Keras-ICNet</a><br><a href="https://github.com/hellochick/ICNet-tensorflow" target="_blank" rel="external">https://github.com/hellochick/ICNet-tensorflow</a></p><p>Key Difference<br>之前的那些方法，如FCN、SegNet、UNet、RefineNet等，用高解析度圖片當input以後，強調Single scale或是Multi Scale在不同層之間的特徵融合，所有的Data需要在整個網絡中運行，因為高解析度的輸入而導致了昂貴的計算費用.而本文的方法，使用低解析度圖片作為主要輸入，採用高解析度圖片進行refine，保留細節的同時減少了開銷.</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">We</span> propose an compressed-PSPNet-<span class="keyword">based </span>image cascade network (ICNet) that incorporates <span class="keyword">multi-resolution </span><span class="keyword">branches </span>under proper label guidance to <span class="keyword">address </span>this challenge.</div></pre></td></tr></table></figure><p>ICNet是一個基於PSPNet的real-time semantic segmentation network，論文內對PSPNet做深入的分析，並且找出影響inference speed*的缺點。並且用搭配multi-resolution cascade combination。</p><p>*註:inference speed是單指DeConv的階段。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172162210529.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在論文發表的時刻(2017 March), CityScapes上所有的Model表現基本上分成兩種類型, 一種是擁有高精準度但速度不行, 另一種是速度快但精准度不行。此論文在PSPNet的基礎上來增進速度，並找一個速度跟精準度的平衡點。</p><p>論文貢獻:</p><ul><li>可以在1024x2048的解析度下保持30 fps的計算速度(Tensorflow版本實測可行, 但要去掉preproccess部分)</li><li>相對PSPNet來說, 可疑提高5倍速度並可以減少五倍RAM消耗</li><li>低解析的速度+高解析的細節做cascade的整合</li></ul><h2 id="Speed-Analysis"><a href="#Speed-Analysis" class="headerlink" title="Speed Analysis"></a>Speed Analysis</h2><p>從PSPNet做解析<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172351270369.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>藍色是1024x2048, 綠色是512x1024 (1/4大小)<br>從上圖可知</p><ul><li>圖越大速度越慢</li><li>網路寬度越大速度越慢</li><li>Kernel越多速度越慢, 以圖中例子來說stage4跟stage5在解析同樣的input時, inference speed差距十分驚人, 因為這部分的kernel number差距了一倍。</li></ul><h2 id="Intuitive-Speedup"><a href="#Intuitive-Speedup" class="headerlink" title="Intuitive Speedup"></a>Intuitive Speedup</h2><h4 id="加速方法-1-輸入向下採樣-Downsampling-Input"><a href="#加速方法-1-輸入向下採樣-Downsampling-Input" class="headerlink" title="加速方法 1: 輸入向下採樣(Downsampling Input)"></a>加速方法 1: 輸入向下採樣(Downsampling Input)</h4><p>在resolution只有原本的0.5跟0.25的狀況下雖然速度變快但精准度如上圖所示可以看出效果很差。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172353341447.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="加速方法-2-利用較小的feature-map來做inference-Downsampling-Feature"><a href="#加速方法-2-利用較小的feature-map來做inference-Downsampling-Feature" class="headerlink" title="加速方法 2 : 利用較小的feature map來做inference(Downsampling Feature)"></a>加速方法 2 : 利用較小的feature map來做inference(Downsampling Feature)</h4><p>FCN Downsampling到32倍, Deep Lab到 8倍, 而下方是用作者之前的PSPNet50, 縮小到了1:8, 1:16, 1:32整理的Table, 但可以看到最快的速度也只有132ms, 不太能符合real-time的標準。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172758974357.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="加速方法-3-減少模型複雜度-Model-Compression"><a href="#加速方法-3-減少模型複雜度-Model-Compression" class="headerlink" title="加速方法 3 : 減少模型複雜度(Model Compression)"></a>加速方法 3 : 減少模型複雜度(Model Compression)</h4><p>採用了其他篇paper(Pruning filters for efficient convnets)，作法就是減少Filter數量, 但一樣差強人意<br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172822508697.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="FCN-Fully-Convolutional-Networks-for-Fully-Convolutional-Networks"><a href="#FCN-Fully-Convolutional-Networks-for-Fully-Convolutional-Networks" class="headerlink" title="FCN:Fully Convolutional Networks for Fully Convolutional Networks"></a>FCN:Fully Convolutional Networks for Fully Convolutional Networks</h4><p>這裡額外多講一下FCN，算是CNN做semantic segmentation的始祖，本質上的區別大概就是…FCN是沒有全連結層的CNN，好處是可以接受任意大小輸入。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172765679435.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>CNN要如何轉FCN? 以此篇paper為例，input是一個224x224x3的圖，經過一系列Conv跟Downsampling之後是7x7x512。<br>AlexNet使用了兩個4096的全連接層，最後一個有1000個神經元的全連接層用於計算分類評分。我們可以將這3個全連接層轉化為Convolution層。</p><p>任一全連結層轉化為Conv的方式以以下為例：</p><h6 id="例如-K-4096-的全連接層，輸入是7x7x512，這個全連接層可以被等效地看做一個F-7-Padding-0-Stride-1-Filter-Number-4096-的Conv層。換句話說，就是將Filter-Size設置的和Input-Data-Size一致了。輸出將變成-1x1x4096，這個結果就和使用初始的那個全連接層一樣了。"><a href="#例如-K-4096-的全連接層，輸入是7x7x512，這個全連接層可以被等效地看做一個F-7-Padding-0-Stride-1-Filter-Number-4096-的Conv層。換句話說，就是將Filter-Size設置的和Input-Data-Size一致了。輸出將變成-1x1x4096，這個結果就和使用初始的那個全連接層一樣了。" class="headerlink" title="例如 K=4096 的全連接層，輸入是7x7x512，這個全連接層可以被等效地看做一個F=7,Padding=0,Stride=1,Filter Number=4096 的Conv層。換句話說，就是將Filter Size設置的和Input Data Size一致了。輸出將變成 1x1x4096，這個結果就和使用初始的那個全連接層一樣了。"></a>例如 K=4096 的全連接層，輸入是7x7x512，這個全連接層可以被等效地看做一個F=7,Padding=0,Stride=1,Filter Number=4096 的Conv層。換句話說，就是將Filter Size設置的和Input Data Size一致了。輸出將變成 1x1x4096，這個結果就和使用初始的那個全連接層一樣了。</h6><p>針對第一個連接區域是[7x7x512]的全連接層，令其Filter Size為F=7<strong>（Filter Size為7x7）</strong>，這樣輸出為[1x1x4096]。<br>針對第二個全連接層，令其Filter Size為F=1<strong>（Filter Size為1x1）</strong>，這樣輸出為[1x1x4096]。<br>對最後一個全連接層也做類似的，令其F=1<strong>（Filter Size為1x1）</strong>，最終輸出為[1x1x1000]</p><h5 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h5><p>下圖是是原始CNN結構，CNN中輸入的圖像大小是統一固定resize成227x227大小的圖像，第一層pooling後為55x55，第二層pooling後為27x27，第五層pooling後的圖像大小為13*13。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172417899356.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h5 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h5><p>FCN輸入的圖像是假設是H*W，第一層pooling後變為原圖大小的1/4，第二層變為的1/8，第五層變為1/ 16，第八層變為1/32<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172417973947.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h5 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3:"></a>Step 3:</h5><p>Convolution本質上就是DownSampling（下採樣）。經過多次Convolution和pooling以後，得到的圖像越來越小，解析度越來越低。其中圖像到H/32∗W/32 的時候圖片是最小的一層時，所產生圖叫做heatmap，heatmap就是我們最重要的高維特徵圖，得到高維特徵的heatmap之後就是最重要的一步也是最後的一步，就是對此heatmap進行UpSampling(Deconvolution)，把圖像進行放大到原圖像的大小。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172418178955.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4:"></a>Step 4:</h5><p>最後的輸出是1000張heatmap經過UpSampling變為原圖大小的圖片。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172418074043.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h5 id="Upsampling"><a href="#Upsampling" class="headerlink" title="Upsampling"></a>Upsampling</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/20161024115403020.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其實這篇paper內雖然叫做Deconvolution，但之前CS231n課程內的大神也有說到，叫做Transposed Convolution比較適合。<br>舉個例子來說：</p><p>4x4的圖片輸入，Filter Size為3x3, 沒有Padding / Stride, 則輸出為2x2。</p><p>輸入矩陣可展開為16維向量，記作<em>x</em><br>輸出矩陣可展開為4維向量，記作<em>y</em><br>Convolution運算可表示為<em>y</em>=<em>Cx</em><br>C其實就是如下的稀疏陣，而Forwarding就改成了的矩陣運算<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172789125366.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>BackPropagation的話，假若已經從更深的網路得到了</p><p><center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172790446136.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></center><br>那麼就可以導出以下公式:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172790496567.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>Deconvolution其實就是Forwarding時乘CT，而BackPropagation時乘(CT)T，即C。總結來說，Deconvolution等於Convolution在神經網絡結構的正向和反向傳播中的計算，做相反的計算。</p><h5 id="Skip-Architecture"><a href="#Skip-Architecture" class="headerlink" title="Skip Architecture"></a>Skip Architecture</h5><p>由於縮小32倍結果超糟糕，所以FCN在前面的Pooling Layer進行Upsampling，然後結合這些結果來優化輸出。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172794424801.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>總結一下前面速度分析的結果，一系列的優化方法：</p><ul><li>Downsampling Input：降低輸入解析度能都大幅度的加速，但同時會讓預測非常模糊</li><li>Downsampling Feature：可以加速但同時會降低準確率</li><li>Model Compression：壓縮訓練好的模型，通過減輕模型達到加速效果，可惜實驗效果不佳</li></ul><p>針對以上的分析，發現，低解析度的圖片能夠有效降低運行時間，但是失去很多細節，而且邊界模糊；但是高解析度的計算時間難以忍受，ICNet總結了上述幾個問題，提出了一個綜合性的方法：使用低解析度加速捕捉語義，使用高解析度獲取細節，使用特徵融合(CFF)結合，同時使用guide label來監督，在限制的時間內獲得有效的結果。</p><p><img src="/media/15172827737568.png" alt=""></p><h4 id="Branch-Analysis"><a href="#Branch-Analysis" class="headerlink" title="Branch Analysis"></a>Branch Analysis</h4><p>圖中用了原尺寸,1/2,1/4當input，低解析度分枝超過50層Convolution，來提取更多的語義信息(inference 18 ms)，中解析度分枝有17層Convolution，但是由於權重共享，只有inference 6ms，而高解析度分枝是3 Convolution，有inference 9ms.</p><table><thead><tr><th style="text-align:center">分枝</th><th>過程</th><th>耗時</th></tr></thead><tbody><tr><td style="text-align:center">低解析</td><td>低解析是FCN-based PSPNet的架構，總和有超過50層的Convolution，在中解析度的1/16輸出的基礎上，再縮放到1/32.經過Convolution後，然後使用幾個dilated convolution擴展接受野但不縮小尺寸，最終以原圖的1/32大小輸出feature map。</td><td>雖然層數較多，但是解析度低，速度快，且與分枝二共享一部分權重，耗時為18 ms</td></tr><tr><td style="text-align:center">中解析</td><td>以原圖的1/2的解析度作為輸入，經過17層Convolution後以1/8縮放，得到原圖的1/16大小feature map，再將低解析度分枝的輸出feature map通過CFF(cascade feature fusion )單元相融合得到最終輸出。值得注意的是：低解析度和中解析度的捲積參數是共享的。</td><td>有17個Convolution層，與分枝一共享一部分權重，與分枝一一起一共耗時6ms</td></tr><tr><td style="text-align:center">高解析</td><td>原圖輸入，經過三層的Convolution(Stride=2,Size=3x3)得到原圖的1/8大小的feature map，再將中解析度處理後的輸出通過CFF單元融合</td><td>有3個卷積層，雖然解析度高，因為少，耗時為9ms</td></tr></tbody></table><p>對於每個分枝的輸出特徵，首先會上採樣2倍做輸出，在訓練的時候，會以Ground truth的1/16、1/8/、1/4來指導各個分枝的訓練，這樣的輔助訓練使得梯度優化更為平滑，便於訓練收斂，隨著每個分枝學習能力的增強，預測沒有被任何一個分枝主導。利用這樣的漸變的特徵融合和級聯引導結構可以產生合理的預測結果。</p><p>ICNet使用低解析度完成語義分割，使用高解析度幫助細化結果。在結構上，產生的feature大大減少，同時仍然保持必要的細節。</p><h4 id="Cascade-Label-Guidance"><a href="#Cascade-Label-Guidance" class="headerlink" title="Cascade Label Guidance"></a>Cascade Label Guidance</h4><h4 id="Branch-Output"><a href="#Branch-Output" class="headerlink" title="Branch Output"></a>Branch Output</h4><p>不同分枝的預測效果如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15172838466580.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>可以看到第三個分枝輸出效果無疑是最好的。在測試時，只保留第三分枝的結果。</p><h2 id="Cascade-Feature-Fusion"><a href="#Cascade-Feature-Fusion" class="headerlink" title="Cascade Feature Fusion"></a>Cascade Feature Fusion</h2><p><img src="/media/15172845289475.jpg" alt=""><br>圖中的Loss是輔助Loss,F1是較低解析的分枝, F2是較高解析的分枝，</p><h2 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h2><p>L=λ1L1+λ2L2+λ3L3<br>Loss是對應到每個downsampled score maps使用cross-entropy loss</p><p>依據CFF的設置，下分枝的lossL3的佔比λ3設置為1的話,則中分枝的lossL2的佔比λ2設置為0.4，上分枝的lossL1的佔比λ1設置為0.16</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><table><thead><tr><th style="text-align:center">項目</th><th style="text-align:center">設置</th></tr></thead><tbody><tr><td style="text-align:center">平台</td><td style="text-align:center">Caffe，CUDA7.5 cudnnV5，TitanX一張</td></tr><tr><td style="text-align:center">測量時間</td><td style="text-align:center">Caffe Time 100次取平均</td></tr><tr><td style="text-align:center">Batch Size</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">學習速率</td><td style="text-align:center">Poly, Learning Rate 0.01, Momentum 0.9</td></tr><tr><td style="text-align:center">迭代次數</td><td style="text-align:center">30K</td></tr><tr><td style="text-align:center">權重衰減</td><td style="text-align:center">0.0001</td></tr><tr><td style="text-align:center">數據增強</td><td style="text-align:center">Random flip, 0.5 to 2 random scale</td></tr><tr><td style="text-align:center">資料集</td><td style="text-align:center">Cityscapes</td></tr></tbody></table><h4 id="model-Compression"><a href="#model-Compression" class="headerlink" title="model Compression"></a>model Compression</h4><p>以PSPNet50為例，直接壓縮結果如下表Baseline：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15173712115585.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>mIoU降低了，但時間170ms達不到realtime。這表明只有模型壓縮是達不到有良好分割結果的實時性能。對比ICNet，有類似的分割結果，但速度提升了5倍多。</p><h4 id="Cascade-Structure-Experiment"><a href="#Cascade-Structure-Experiment" class="headerlink" title="Cascade Structure Experiment"></a>Cascade Structure Experiment</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15173713226717.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>sub4代表只有低解析度輸入的結果，sub24代表前兩個分枝，sub124全部分枝。注意到全部分枝的速度很快，並且性能接近PSPNet了，且能保持30fps。而且Ram消耗也明顯減少了。</p><h4 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15173715003744.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="Cityscape-Comparison"><a href="#Cityscape-Comparison" class="headerlink" title="Cityscape Comparison"></a>Cityscape Comparison</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15173715775469.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Recap&quot;&gt;&lt;a href=&quot;#Recap&quot; class=&quot;headerlink&quot; title=&quot;Recap&quot;&gt;&lt;/a&gt;Recap&lt;/h2&gt;&lt;p&gt;Quote:&lt;br&gt;其實很討厭這作者的paper&lt;br&gt;效果都很好, 但是每次都是用matlab, 而且PSPNet
      
    
    </summary>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/categories/Segmentation/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Computer Vision" scheme="https://world4jason.github.io/tags/Computer-Vision/"/>
    
      <category term="Segmentation" scheme="https://world4jason.github.io/tags/Segmentation/"/>
    
      <category term="real-time" scheme="https://world4jason.github.io/tags/real-time/"/>
    
  </entry>
  
  <entry>
    <title>機器學習中的相似性度量</title>
    <link href="https://world4jason.github.io/2018/01/14/Distance/"/>
    <id>https://world4jason.github.io/2018/01/14/Distance/</id>
    <published>2018-01-13T18:12:19.000Z</published>
    <updated>2018-01-17T12:23:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Euclidean-Distance-歐幾里和距離"><a href="#Euclidean-Distance-歐幾里和距離" class="headerlink" title="Euclidean Distance(歐幾里和距離)"></a>Euclidean Distance(歐幾里和距離)</h2><p>二維與三維中就是兩點之間的距離。</p><p><img src="/media/15158672262601.jpg" alt=""></p><p>上圖中的綠線為歐氏距離，又稱歐幾里和距離(Euclidean Distance)，其餘的藍色與黃色還有紅色皆為曼哈頓距離。</p><h2 id="Manhattan-distance-曼哈頓距離"><a href="#Manhattan-distance-曼哈頓距離" class="headerlink" title="Manhattan distance(曼哈頓距離)"></a>Manhattan distance(曼哈頓距離)</h2><p>平面上，坐標（x1, y1）的點P1與坐標（x2, y2）的點P2的曼哈頓距離為：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15158673215658.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>L1-距離</p><h2 id="Mahalanobis-distance-馬氏距離"><a href="#Mahalanobis-distance-馬氏距離" class="headerlink" title="Mahalanobis distance(馬氏距離)"></a>Mahalanobis distance(馬氏距離)</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5" target="_blank" rel="external">Covariance Matrix</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mahalanobis distance can be defined <span class="keyword">as</span> <span class="keyword">a</span> dissimilarity measure between <span class="literal">two</span> <span class="built_in">random</span> vectors x <span class="keyword">and</span> y <span class="keyword">of</span> <span class="keyword">the</span> same distribution <span class="keyword">with</span> <span class="keyword">the</span> covariance matrix S:</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15158695072163.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15158699156018.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Chebyshev-distance-切比雪夫距離"><a href="#Chebyshev-distance-切比雪夫距離" class="headerlink" title="Chebyshev distance(切比雪夫距離)"></a>Chebyshev distance(切比雪夫距離)</h2><h2 id="Minkowski-distance-明可夫斯基距離"><a href="#Minkowski-distance-明可夫斯基距離" class="headerlink" title="Minkowski distance (明可夫斯基距離)"></a>Minkowski distance (明可夫斯基距離)</h2><p><a href="http://www.cnblogs.com/heaad/archive/2011/03/08/1977733.html" target="_blank" rel="external">http://www.cnblogs.com/heaad/archive/2011/03/08/1977733.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Euclidean-Distance-歐幾里和距離&quot;&gt;&lt;a href=&quot;#Euclidean-Distance-歐幾里和距離&quot; class=&quot;headerlink&quot; title=&quot;Euclidean Distance(歐幾里和距離)&quot;&gt;&lt;/a&gt;Euclidean 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep Sort: Simple Online and Realtime Tracking with a Deep Association Metric</title>
    <link href="https://world4jason.github.io/2018/01/14/Deep-Sort/"/>
    <id>https://world4jason.github.io/2018/01/14/Deep-Sort/</id>
    <published>2018-01-13T17:38:43.000Z</published>
    <updated>2018-01-13T18:12:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章是基於SORT的改進<br>具體來說就是一句話</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">We adopt <span class="keyword">a</span> conventional single hypothesis tracking methodology <span class="keyword">with</span> recursive kalman filtering <span class="keyword">and</span> frame-<span class="keyword">by</span>-frame data association.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇文章是基於SORT的改進&lt;br&gt;具體來說就是一句話&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pr
      
    
    </summary>
    
      <category term="MOT" scheme="https://world4jason.github.io/categories/MOT/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Computer Vision" scheme="https://world4jason.github.io/tags/Computer-Vision/"/>
    
      <category term="Tracking" scheme="https://world4jason.github.io/tags/Tracking/"/>
    
      <category term="MOT" scheme="https://world4jason.github.io/tags/MOT/"/>
    
  </entry>
  
  <entry>
    <title>Multiple Object Tracking Summary</title>
    <link href="https://world4jason.github.io/2018/01/10/Multiple-Object-Tracking-Summary/"/>
    <id>https://world4jason.github.io/2018/01/10/Multiple-Object-Tracking-Summary/</id>
    <published>2018-01-10T12:03:49.000Z</published>
    <updated>2018-01-13T17:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://perception.yale.edu/Brian/refGuides/MOT.html" target="_blank" rel="external">http://perception.yale.edu/Brian/refGuides/MOT.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://perception.yale.edu/Brian/refGuides/MOT.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://perception.yale.edu/Brian/refGuides/M
      
    
    </summary>
    
      <category term="MOT" scheme="https://world4jason.github.io/categories/MOT/"/>
    
    
      <category term="Computer Vision" scheme="https://world4jason.github.io/tags/Computer-Vision/"/>
    
      <category term="Tracking" scheme="https://world4jason.github.io/tags/Tracking/"/>
    
      <category term="MOT" scheme="https://world4jason.github.io/tags/MOT/"/>
    
      <category term="Summary" scheme="https://world4jason.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning and Computer Vision Recommended Paper</title>
    <link href="https://world4jason.github.io/2018/01/09/Deep-Learning-Recommended-Papers/"/>
    <id>https://world4jason.github.io/2018/01/09/Deep-Learning-Recommended-Papers/</id>
    <published>2018-01-09T13:50:49.000Z</published>
    <updated>2018-01-13T18:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Image-Classification"><a href="#Image-Classification" class="headerlink" title="Image Classification"></a>Image Classification</h2><h4 id="Must-Read-LeNet-AlexNet-VGG-16-GoogleNet-ResNet"><a href="#Must-Read-LeNet-AlexNet-VGG-16-GoogleNet-ResNet" class="headerlink" title="Must Read : LeNet, AlexNet, VGG-16, GoogleNet, ResNet"></a>Must Read : LeNet, AlexNet, VGG-16, GoogleNet, ResNet</h4><table><thead><tr><th style="text-align:center">Title</th><th style="text-align:center">Authors</th><th style="text-align:center">Pub.</th><th style="text-align:center">Links</th><th style="text-align:center">Figure</th></tr></thead><tbody><tr><td style="text-align:center">LeNet-5, convolutional neural networks</td><td style="text-align:center">Y. LeCun</td><td style="text-align:center">??? 199X</td><td style="text-align:center"><a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="external">Web</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/LeNet.png" alt="LeNet" title="">                </div>                <div class="image-caption">LeNet</div>            </figure></td></tr><tr><td style="text-align:center">ImageNet Classification with Deep Convolutional Neural Networks</td><td style="text-align:center">Alex Krizhevsky,Ilya Sutskever,Geoffrey E. Hinton</td><td style="text-align:center">NIPS 2014</td><td style="text-align:center"><a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/AlexNet.jpg" alt="AlexNet" title="">                </div>                <div class="image-caption">AlexNet</div>            </figure></td></tr><tr><td style="text-align:center">Very Deep Convolutional Networks for Large-Scale Image Recognition</td><td style="text-align:center">Karen Simonyan, Andrew Zisserman</td><td style="text-align:center">ICLR 2014</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1409.1556.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/VGG16.png" alt="VGG16" title="">                </div>                <div class="image-caption">VGG16</div>            </figure></td></tr><tr><td style="text-align:center">Going Deeper with Convolutions</td><td style="text-align:center">Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed</td><td style="text-align:center">CVPR 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/html/Szegedy_Going_Deeper_With_2015_CVPR_paper.html" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/GoogLeNet.png" alt="GoogLeNet" title="">                </div>                <div class="image-caption">GoogLeNet</div>            </figure></td></tr><tr><td style="text-align:center">Deep Residual Learning for Image Recognition</td><td style="text-align:center">Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun</td><td style="text-align:center">CVPR 2016 <em><code>best</code></em></td><td style="text-align:center"><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="external">paper</a> <a href="https://github.com/KaimingHe/deep-residual-networks" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/ResNet.png" alt="ResNet" title="">                </div>                <div class="image-caption">ResNet</div>            </figure></td></tr><tr><td style="text-align:center">Residual Attention Network for Image Classification</td><td style="text-align:center">Fei Wang, Mengqing Jiang, Chen Qian, Shuo Yang, Cheng Li, Honggang Zhang, Xiaogang Wang, Xiaoou Tang</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1704.06904" target="_blank" rel="external">paper</a> <a href="https://github.com/buptwangfei/residual-attention-network" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Res-Attention-Network.png" alt="Res-Attention-Network" title="">                </div>                <div class="image-caption">Res-Attention-Network</div>            </figure></td></tr><tr><td style="text-align:center">Aggregated Residual Transformations for Deep Neural Networks</td><td style="text-align:center">Saining Xie, Ross Girshick, Piotr Dollár, Zhuowen Tu, and Kaiming He</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1611.05431" target="_blank" rel="external">paper</a> <a href="https://github.com/facebookresearch/ResNeXt" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/ResNeXt.png" alt="ResNeXt" title="">                </div>                <div class="image-caption">ResNeXt</div>            </figure></td></tr><tr><td style="text-align:center">Densely Connected Convolutional Networks</td><td style="text-align:center">Gao Huang, Zhuang Liu, Kilian Q. Weinberger</td><td style="text-align:center">CVPR 2017 <em><code>best</code></em></td><td style="text-align:center"><a href="https://arxiv.org/abs/1608.06993" target="_blank" rel="external">paper</a> <a href="https://github.com/liuzhuang13/DenseNet" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/DenseNet.png" alt="DenseNet" title="">                </div>                <div class="image-caption">DenseNet</div>            </figure></td></tr><tr><td style="text-align:center">Deep Pyramidal Residual Networks</td><td style="text-align:center">Dongyoon Han, Jiwhan Kim, Junmo Kim</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1610.02915.pdf" target="_blank" rel="external">paper</a> <a href="https://github.com/jhkim89/PyramidNet" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/PyramidNet.png" alt="PyramidNet" title="">                </div>                <div class="image-caption">PyramidNet</div>            </figure></td></tr></tbody></table><h2 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h2><h4 id="Must-Read-R-CNN-Fast-R-CNN-Faster-R-CNN-YOLO-SSD"><a href="#Must-Read-R-CNN-Fast-R-CNN-Faster-R-CNN-YOLO-SSD" class="headerlink" title="Must Read : R-CNN, Fast R-CNN, Faster R-CNN, YOLO, SSD"></a>Must Read : R-CNN, Fast R-CNN, Faster R-CNN, YOLO, SSD</h4><table><thead><tr><th style="text-align:center">Title</th><th style="text-align:center">Authors</th><th style="text-align:center">Pub.</th><th style="text-align:center">Links</th><th style="text-align:center">Figure</th></tr></thead><tbody><tr><td style="text-align:center">Rich feature hierarchies for accurate object detection and semantic segmentation</td><td style="text-align:center">Ross Girshick, Jeff Donahue, Trevor Darrell, Jitendra Malik</td><td style="text-align:center">CVPR 2014</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_cvpr_2014/papers/Girshick_Rich_Feature_Hierarchies_2014_CVPR_paper.pdf" target="_blank" rel="external">paper</a> <a href="https://github.com/rbgirshick/rcnn" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/R-CNN.png" alt="R-CNN" title="">                </div>                <div class="image-caption">R-CNN</div>            </figure></td></tr><tr><td style="text-align:center">Fast R-CNN</td><td style="text-align:center">Ross Girshick</td><td style="text-align:center">ICCV 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Girshick_Fast_R-CNN_ICCV_2015_paper.pdf" target="_blank" rel="external">paper</a> <a href="https://github.com/rbgirshick/fast-rcnn" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Fast-R-CNN.png" alt="Fast-R-CNN" title="">                </div>                <div class="image-caption">Fast-R-CNN</div>            </figure></td></tr><tr><td style="text-align:center">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</td><td style="text-align:center">Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun</td><td style="text-align:center">TPAMI 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Girshick_Fast_R-CNN_ICCV_2015_paper.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/SPP-Net.png" alt="SPP Net" title="">                </div>                <div class="image-caption">SPP Net</div>            </figure></td></tr><tr><td style="text-align:center">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</td><td style="text-align:center">Shaoqing Ren, <a href="http://kaiminghe.com/" target="_blank" rel="external">Kaiming He</a>, Ross Girshick, Jian Sun</td><td style="text-align:center">NIPS 2015</td><td style="text-align:center"><a href="http://papers.nips.cc/paper/5638-faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks.pdf" target="_blank" rel="external">paper</a> <a href="https://github.com/ShaoqingRen/faster_rcnn" target="_blank" rel="external"><code>matlab</code></a> <a href="https://github.com/rbgirshick/py-faster-rcnn" target="_blank" rel="external"><code>python</code></a> <a href="https://github.com/longcw/faster_rcnn_pytorch" target="_blank" rel="external"><code>pytorch</code></a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Faster-R-CNN.png" alt="Faster-R-CNN" title="">                </div>                <div class="image-caption">Faster-R-CNN</div>            </figure></td></tr><tr><td style="text-align:center">You Only Look Once: Unified, Real-Time Object Detection</td><td style="text-align:center">Joseph Redmon,Santosh Divvala,Ross Girshick, Ali Farhadi</td><td style="text-align:center">CVPR 2016</td><td style="text-align:center"><a href="http://arxiv.org/pdf/1506.02640.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/YOLO.jpg" alt="YOLO" title="">                </div>                <div class="image-caption">YOLO</div>            </figure></td></tr><tr><td style="text-align:center">SSD: Single Shot MultiBox Detector</td><td style="text-align:center">Wei Liu1, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg</td><td style="text-align:center">CVPR 2016</td><td style="text-align:center"><a href="http://arxiv.org/pdf/1512.02325.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/SSD.png" alt="SSD" title="">                </div>                <div class="image-caption">SSD</div>            </figure></td></tr><tr><td style="text-align:center">Convolutional Feature Masking for Joint Object and Stuff Segmentation</td><td style="text-align:center">Jifeng Dai, <a href="http://kaiminghe.com/" target="_blank" rel="external">Kaiming He</a>, Jian Sun</td><td style="text-align:center">CVPR 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Dai_Convolutional_Feature_Masking_2015_CVPR_paper.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/CFM.png" alt="CFM" title="">                </div>                <div class="image-caption">CFM</div>            </figure></td></tr><tr><td style="text-align:center">Instance-aware Semantic Segmentation via Multi-task Network Cascades</td><td style="text-align:center">Jifeng Dai, <a href="http://kaiminghe.com/" target="_blank" rel="external">Kaiming He</a>, Jian Sun</td><td style="text-align:center">CVPR 2016</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Dai_Instance-Aware_Semantic_Segmentation_CVPR_2016_paper.pdf" target="_blank" rel="external">paper</a> <a href="https://github.com/daijifeng001/MNC" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/MNC.png" alt="MNC" title="">                </div>                <div class="image-caption">MNC</div>            </figure></td></tr><tr><td style="text-align:center">R-FCN: Object Detection via Region-based Fully Convolutional Networks</td><td style="text-align:center">Jifeng Dai, Yi Li, <a href="http://kaiminghe.com/" target="_blank" rel="external">Kaiming He</a>, Jian Sun</td><td style="text-align:center">NIPS 2016</td><td style="text-align:center"><a href="https://arxiv.org/abs/1605.06409" target="_blank" rel="external">paper</a> <a href="https://github.com/daijifeng001/R-FCN" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Region-FCN.png" alt="Region-FCN" title="">                </div>                <div class="image-caption">Region-FCN</div>            </figure></td></tr><tr><td style="text-align:center">Feature Pyramid Networks for Object Detection</td><td style="text-align:center">Tsung-Yi Lin, Piotr Dollár, Ross Girshick, <a href="http://kaiminghe.com/" target="_blank" rel="external">Kaiming He</a>, Bharath Hariharan, and Serge Belongie</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1612.03144.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/FPN.png" alt="FPN" title="">                </div>                <div class="image-caption">FPN</div>            </figure></td></tr><tr><td style="text-align:center">Mask R-CNN</td><td style="text-align:center">Kaiming He, Georgia Gkioxari, Piotr Dollár, Ross Girshick</td><td style="text-align:center">ICCV 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1703.06870" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Mask-R-CNN.png" alt="Mask-R-CNN" title="">                </div>                <div class="image-caption">Mask-R-CNN</div>            </figure></td></tr><tr><td style="text-align:center">A-Fast-RCNN: Hard Positive Generation via Adversary for Object Detection</td><td style="text-align:center">Xiaolong Wang, Abhinav Shrivastava, Abhinav Gupta</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1704.03414" target="_blank" rel="external">paper</a>  <a href="https://github.com/xiaolonw/adversarial-frcnn" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/A-Fast-R-CNN.png" alt="A-Fast-R-CNN" title="">                </div>                <div class="image-caption">A-Fast-R-CNN</div>            </figure></td></tr><tr><td style="text-align:center">Multiple Instance Detection Network with Online Instance Classifier Refinement</td><td style="text-align:center">Peng Tang, Xinggang Wang, Xiang Bai, Wenyu Liu</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1704.00138" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/MIDN.png" alt="MIDN" title="">                </div>                <div class="image-caption">MIDN</div>            </figure></td></tr><tr><td style="text-align:center">R-FCN-3000 at 30fps: Decoupling Detection and Classification</td><td style="text-align:center">Bharat Singh, Hengdou Li, Abhishek Sharma and Larry S. Davis</td><td style="text-align:center">Tech Report</td><td style="text-align:center"><a href="https://arxiv.org/abs/1712.01802" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/R-FCN-3000.png" alt="R-FCN-3000" title="">                </div>                <div class="image-caption">R-FCN-3000</div>            </figure></td></tr></tbody></table><h2 id="Semantic-Segmentation-and-Scene-Parsing"><a href="#Semantic-Segmentation-and-Scene-Parsing" class="headerlink" title="Semantic Segmentation and Scene Parsing"></a>Semantic Segmentation and Scene Parsing</h2><h4 id="Must-Read-FCN-Learning-Deconvolution-Network-for-Semantic-Segmentation-U-Net"><a href="#Must-Read-FCN-Learning-Deconvolution-Network-for-Semantic-Segmentation-U-Net" class="headerlink" title="Must Read : FCN, Learning Deconvolution Network for Semantic Segmentation, U-Net"></a>Must Read : FCN, Learning Deconvolution Network for Semantic Segmentation, U-Net</h4><table><thead><tr><th>Title</th><th style="text-align:center">Authors</th><th style="text-align:center">Pub.</th><th style="text-align:center">Links</th><th style="text-align:center">Figure</th></tr></thead><tbody><tr><td>Fully Convolutional Networks for Semantic Segmentation</td><td style="text-align:center">Jonathan Long, Evan Shelhamer, Trevor Darrell</td><td style="text-align:center">CVPR 2015</td><td style="text-align:center"><a href="https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/FCN.png" alt="FCN" title="">                </div>                <div class="image-caption">FCN</div>            </figure></td></tr><tr><td>Learning to Segment Object Candidates</td><td style="text-align:center">Pedro O. Pinheiro, Ronan Collobert, Piotr Dollar</td><td style="text-align:center">NIPS 2015</td><td style="text-align:center"><a href="http://papers.nips.cc/paper/5852-learning-to-segment-object-candidates.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/LSOC.png" alt="LSOC" title="">                </div>                <div class="image-caption">LSOC</div>            </figure></td></tr><tr><td>Learning to Refine Object Segments</td><td style="text-align:center">Pedro O. Pinheiro , Tsung-Yi Lin , Ronan Collobert, Piotr Doll ́ar</td><td style="text-align:center">arXiv 1603.08695</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1603.08695.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/LROS.png" alt="LROS" title="">                </div>                <div class="image-caption">LROS</div>            </figure></td></tr><tr><td>Conditional Random Fields as Recurrent Neural Networks</td><td style="text-align:center">Shuai Zheng, Sadeep Jayasumana, Bernardino Romera-Paredes, Vibhav Vineet, ZhiZhong Su, Dalong Du, Chang Huang, and Philip H. S. Torr</td><td style="text-align:center">ICCV 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/html/Zheng_Conditional_Random_Fields_ICCV_2015_paper.html" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/CRFRNN.png" alt="CRFRNN" title="">                </div>                <div class="image-caption">CRFRNN</div>            </figure></td></tr><tr><td>Learning Deconvolution Network for Semantic Segmentation</td><td style="text-align:center">Heonwoo Noh, Seunghoon Hong, Bohyung Han</td><td style="text-align:center">ICCV 2015</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/html/Noh_Learning_Deconvolution_Network_ICCV_2015_paper.html" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/LDN.png" alt="LDN" title="">                </div>                <div class="image-caption">LDN</div>            </figure></td></tr><tr><td>U-Net: Convolutional Networks for Biomedical Image Segmentation</td><td style="text-align:center">Olaf Ronneberger, Philipp Fischer, Thomas Brox</td><td style="text-align:center">MICCAI 2015</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1505.04597.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/U-Net.png" alt="U-Net" title="">                </div>                <div class="image-caption">U-Net</div>            </figure></td></tr><tr><td>Instance-sensitive Fully Convolutional Networks</td><td style="text-align:center">Jifeng Dai, Kaiming He, Yi Li, Shaoqing Ren, Jian Sun</td><td style="text-align:center">ECCV 2016</td><td style="text-align:center"><a href="https://arxiv.org/abs/1603.08678" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/ISFCN.png" alt="ISFCN" title="">                </div>                <div class="image-caption">ISFCN</div>            </figure></td></tr><tr><td>Laplacian Pyramid Reconstruction and Refinement for Semantic Segmentation</td><td style="text-align:center">Golnaz Ghiasi, Charless C. Fowlkes</td><td style="text-align:center">ECCV 2016</td><td style="text-align:center"><a href="https://link.springer.com/chapter/10.1007/978-3-319-46487-9_32" target="_blank" rel="external">paper</a>  <a href="https://github.com/golnazghiasi/LRR" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/LPRR.png" alt="LPRR" title="">                </div>                <div class="image-caption">LPRR</div>            </figure></td></tr><tr><td>Attention to Scale: Scale-aware Semantic Image Segmentation</td><td style="text-align:center">Liang-Chieh Chen, Yi Yang, Jiang Wang, Wei Xu</td><td style="text-align:center">CVPR 2016</td><td style="text-align:center"><a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/html/Chen_Attention_to_Scale_CVPR_2016_paper.html" target="_blank" rel="external">paper</a> <a href="http://liangchiehchen.com/projects/DeepLab.html" target="_blank" rel="external"><code>DeepLab</code></a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Attention-to-scale.png" alt="Attention-to-scale" title="">                </div>                <div class="image-caption">Attention-to-scale</div>            </figure></td></tr><tr><td>RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation</td><td style="text-align:center">Guosheng Lin, Anton Milan, Chunhua Shen, Ian Reid</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1611.06612" target="_blank" rel="external">paper</a>  <a href="https://github.com/guosheng/refinenet" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/RefineNet.png" alt="RefineNet" title="">                </div>                <div class="image-caption">RefineNet</div>            </figure></td></tr><tr><td></td></tr><tr><td>Pyramid Scene Parsing Network</td><td style="text-align:center">Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, Jiaya Jia</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1612.01105" target="_blank" rel="external">paper</a>  <a href="https://github.com/hszhao/PSPNet" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/PSPNet.png" alt="PSPNet" title="">                </div>                <div class="image-caption">PSPNet</div>            </figure></td></tr><tr><td>ICNet for Real-Time Semantic Segmentation on High-Resolution Images</td><td style="text-align:center">Hengshuang Zhao, Xiaojuan Qi, Xiaoyong Shen, Jianping Shi, Jiaya Jia</td><td style="text-align:center">Tech Report</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1704.08545.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/ICNet.png" alt="ICNet" title="">                </div>                <div class="image-caption">ICNet</div>            </figure></td></tr><tr><td>Dilated Residual Networks</td><td style="text-align:center">Fisher Yu, Vladlen Koltun, Thomas Funkhouser</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1705.09914" target="_blank" rel="external">paper</a> <a href="https://github.com/fyu/drn" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/DRN.png" alt="DRN" title="">                </div>                <div class="image-caption">DRN</div>            </figure></td></tr><tr><td>Fully Convolutional Instance-aware Semantic Segmentation</td><td style="text-align:center">Yi Li, Haozhi Qi, Jifeng Dai, Xiangyang Ji, Yichen Wei</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1611.07709" target="_blank" rel="external">paper</a> <a href="https://github.com/msracver/FCIS" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/FCIS.png" alt="FCIS" title="">                </div>                <div class="image-caption">FCIS</div>            </figure></td></tr><tr><td>Full-Resolution Residual Networks for Semantic Segmentation in Street Scenes</td><td style="text-align:center">Tobias Pohlen, Alexander Hermans, Markus Mathias, Bastian Leibe</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1611.08323" target="_blank" rel="external">paper</a> <a href="https://github.com/TobyPDE/FRRN" target="_blank" rel="external">github</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/FRRN.png" alt="FRRN" title="">                </div>                <div class="image-caption">FRRN</div>            </figure></td></tr><tr><td>Object Region Mining with Adversarial Erasing: A Simple Classification toSemantic Segmentation Approach</td><td style="text-align:center">Yunchao Wei, Jiashi Feng, Xiaodan Liang, Ming-Ming Cheng, Yao Zhao, Shuicheng Yan</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1703.08448" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/A-Erasing.png" alt="A-Erasing" title="">                </div>                <div class="image-caption">A-Erasing</div>            </figure></td></tr><tr><td>Not All Pixels Are Equal: Difficulty-Aware Semantic Segmentation via Deep Layer Cascade</td><td style="text-align:center">Xiaoxiao Li, Ziwei Liu, Ping Luo, Chen Change Loy, Xiaoou Tang</td><td style="text-align:center">CVPR 2017</td><td style="text-align:center"><a href="https://arxiv.org/pdf/1704.01344.pdf" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Not-All-Pixels-Are-Equal.png" alt="Not-All-Pixels-Are-Equal" title="">                </div>                <div class="image-caption">Not-All-Pixels-Are-Equal</div>            </figure></td></tr><tr><td>Semantic Segmentation with Reverse Attention</td><td style="text-align:center">Qin Huang, Chunyang Xia, Wuchi Hao, Siyang Li, Ye Wang, Yuhang Song and C.-C. Jay Kuo</td><td style="text-align:center">BMVC 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1707.06426" target="_blank" rel="external">paper</a> <a href="https://drive.google.com/drive/folders/0By2w_AaM8Rzbllnc3JCQjhHYnM?usp=sharing" target="_blank" rel="external"><code>code</code></a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Rev-Attention.png" alt="Rev-Attention" title="">                </div>                <div class="image-caption">Rev-Attention</div>            </figure></td></tr><tr><td>Predicting Deeper into the Future of Semantic Segmentation</td><td style="text-align:center">Pauline Luc, Natalia Neverova, Camille Couprie, Jakob Verbeek and Yann LeCun</td><td style="text-align:center">ICCV 2017</td><td style="text-align:center"><a href="https://arxiv.org/abs/1703.07684" target="_blank" rel="external">paper</a> <a href="https://thoth.inrialpes.fr/people/pluc/iccv2017" target="_blank" rel="external"><code>project page</code></a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Deeper-into-Future.png" alt="Deeper-into-Future" title="">                </div>                <div class="image-caption">Deeper-into-Future</div>            </figure></td></tr><tr><td>Learning to Segment Every Thing</td><td style="text-align:center">Ronghang Hu, Piotr Dollar, Kaiming He, Trevor Darrell, Ross Girshick</td><td style="text-align:center">Tech Report</td><td style="text-align:center"><a href="https://arxiv.org/abs/1711.10370" target="_blank" rel="external">paper</a></td><td style="text-align:center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/data/Seg-Everything.png" alt="Seg-Everything" title="">                </div>                <div class="image-caption">Seg-Everything</div>            </figure></td></tr></tbody></table><h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><ul><li>Dropout- A Simple Way to Prevent Neural Networks from Overfitting</li><li>Batch Normalization- Accelerating Deep Network Training by Reducing Internal Covariate Shift</li></ul><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><ul><li>Generating Sequences With Recurrent Neural Networks</li><li>Word embedding</li><li>Distributed Representations of Words and Phrases and their Compositionality</li></ul><h2 id="Image-captioning"><a href="#Image-captioning" class="headerlink" title="Image captioning"></a>Image captioning</h2><p>Show and Tell: A Neural Image Caption Generator<br>Show, Attend and Tell: Neural Image Caption Generation with Visual Attention</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Image-Classification&quot;&gt;&lt;a href=&quot;#Image-Classification&quot; class=&quot;headerlink&quot; title=&quot;Image Classification&quot;&gt;&lt;/a&gt;Image Classification&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Paper List" scheme="https://world4jason.github.io/tags/Paper-List/"/>
    
      <category term="Self-Study" scheme="https://world4jason.github.io/tags/Self-Study/"/>
    
      <category term="Computer Vision" scheme="https://world4jason.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>Person re-ID Summary</title>
    <link href="https://world4jason.github.io/2018/01/02/person_re-ID_summary/"/>
    <id>https://world4jason.github.io/2018/01/02/person_re-ID_summary/</id>
    <published>2018-01-02T13:50:49.000Z</published>
    <updated>2018-01-28T09:19:05.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15149820234945.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><h2 id="難度"><a href="#難度" class="headerlink" title="難度"></a>難度</h2><ol><li>目標遮擋（Occlusion）導致部分特徵丟失</li><li>不同的 View，Illumination 導致同一目標的特徵差異</li><li>不同目標衣服顏色近似、特徵近似導致區分度下降</li></ol><h2 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h2><h3 id="1-Representation-learning-ReID"><a href="#1-Representation-learning-ReID" class="headerlink" title="1. Representation learning + ReID"></a>1. Representation learning + ReID</h3><p>看做分類(Classification/Identification)問題或者驗證(Verification)問題：<br>(1) 分類問題是指利用行人的ID或者屬性等作為訓練標籤來訓練模型；<br>(2) 驗證問題是指輸入一對（兩張）行人圖片，讓網絡來學習這兩張圖片是否屬於同一個行人。</p><p>Classification/Identification loss和verification loss</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150472221676.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>額外改進方向[2]是在加上許多行人的label，像是性別、頭髮以及服裝等等。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150474384428.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="2-Metric-learning-ReID"><a href="#2-Metric-learning-ReID" class="headerlink" title="2. Metric learning + ReID"></a>2. Metric learning + ReID</h3><p>常用於圖像檢索的方法，通過網絡學習出兩張圖片的相似度。<br>(Contrastive loss)[5]、三元組損失(Triplet loss)、 四元組損失(Quadruplet loss)、難樣本採樣三元組損失(Triplet hard loss with batch hard mining, TriHard loss)、邊界挖掘損失(Margin sample mining loss, MSML</p><p>Contrastive loss 基本上就是Siamese CNN<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150477657739.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>訓練時是三個正樣本一個副樣本，test時未知<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150479915859.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150480384222.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="3-Local-Feature-ReID"><a href="#3-Local-Feature-ReID" class="headerlink" title="3. Local Feature + ReID"></a>3. Local Feature + ReID</h3><p>論文[3]用local feature而不用global feature，切割好以後送到LSTM去學<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150481401848.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>但論文[3]會有對齊問題，所以論文[4]用pose跟skeleton來做姿勢預測，再通過仿射變換對齊</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150485085441.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>論文[5]直接拿關節點切出ROI，14個人體關節點，得到7個ROI區域，(頭、上身、下身和四肢)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150485782017.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="4-Video-Sequence-ReID"><a href="#4-Video-Sequence-ReID" class="headerlink" title="4. Video Sequence + ReID"></a>4. Video Sequence + ReID</h3><p>這方向不熟 貼兩張圖參考參考而已<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150487793131.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150488009610.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="5-GAN-ReID"><a href="#5-GAN-ReID" class="headerlink" title="5. GAN + ReID"></a>5. GAN + ReID</h3><p>ReID數據集目前最大的也只有幾千個ID，跟萬張圖片而已，CNN based還容易overfitting<br>GAN主要是用在遷移學習跟基於條件的生成</p><p>第一篇就是ICCV2017的論文[5]以及後來同作者改進的論文[6]，是可以避免overfitting但生成效果就很慘<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150491105798.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>為了處理不同數據集，甚至是不同camera所造成bias的問題，論文[7]是利用cycleGAN based的設計，利用遷移學習來處理兩個數同數據集的問題，先切割分前景跟背景，在轉換過去。<br>D有兩個loss(還是有兩個D不確定，paper內沒架構圖)一個是前景的絕對誤差loss，一個是正常的判別器loss。判別器loss是用來判斷生成的圖屬於哪個domain，前景的loss是為了保證行人前景儘可能逼真不變。mask用PSPnet來找的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150492644360.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Pose Normalization[8]<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150490021821.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150490274695.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15150495642066.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="資料種類"><a href="#資料種類" class="headerlink" title="資料種類"></a>資料種類</h2><ul><li>Video-based</li><li>Image-based</li><li>Long-term activity</li><li>Individual action </li></ul><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><p><a href="http://robustsystems.coe.neu.edu/sites/robustsystems.coe.neu.edu/files/systems/projectpages/reiddataset.html" target="_blank" rel="external">Robust Systems Lab</a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p><a href="https://zhuanlan.zhihu.com/p/32585203" target="_blank" rel="external">简单行人重识别代码到88%准确率</a><br><a href="https://github.com/layumi/Person_reID_baseline_pytorch" target="_blank" rel="external">https://github.com/layumi/Person_reID_baseline_pytorch</a></p><ul><li><h3 id="ICCV-2017"><a href="#ICCV-2017" class="headerlink" title="ICCV 2017"></a>ICCV 2017</h3><ul><li><a href="https://github.com/KovenYu/CAMEL" target="_blank" rel="external">Cross-view Asymmetric Metric Learning for Unsupervised Re-id </a></li><li><a href="https://github.com/zlmzju/part_reid" target="_blank" rel="external">Deeply-Learned Part-Aligned Representations for Person Re-Identification </a></li><li><a href="https://github.com/VisualComputingInstitute/triplet-reid" target="_blank" rel="external">In Defense of the Triplet Loss for Person Re-Identification </a></li><li><a href="https://github.com/shuangjiexu/Spatial-Temporal-Pooling-Networks-ReID" target="_blank" rel="external">Jointly Attentive Spatial-Temporal Pooling Networks for Video-based Person Re-Identification</a></li><li><a href="http://github.com/syfafterzy/SVDNet-for-Pedestrian-Retrieval" target="_blank" rel="external">SVDNet for Pedestrian Retrieval</a></li><li><a href="http://github.com/layumi/Person-reID_GAN" target="_blank" rel="external">Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro</a></li></ul></li></ul><ul><li><h3 id="CVPR-2017"><a href="#CVPR-2017" class="headerlink" title="CVPR 2017"></a>CVPR 2017</h3><ul><li><a href="http://github.com/yokattame/SpindleNet" target="_blank" rel="external">Spindle Net: Person Re-Identification With Human Body Region Guided Feature Decomposition and Fusion</a></li><li><a href="http://github.com/liangzheng06/PRW-baseline" target="_blank" rel="external">Person Re-Identification in the Wild</a> </li><li><a href="http://github.com/ShuangLI59/person_search" target="_blank" rel="external">Joint Detection and Identification Feature Learning for Person Search</a></li><li><a href="http//github.com/sciencefans/Quality-Aware-Network">Quality Aware Network for Set to Set Recognition</a></li></ul></li></ul><h2 id="Paper-List"><a href="#Paper-List" class="headerlink" title="Paper List"></a>Paper List</h2><pre><code>- Point to Set Similarity Based Deep Feature Learning for Person Re-Identification- Fast Person Re-Identification via Cross-Camera Semantic Binary Transformation- See the Forest for the Trees: Joint Spatial and Temporal Recurrent Neural Networks for Video-Based Person Re-Identification- Learning Deep Context-Aware Features Over Body and Latent Parts for Person Re-Identification- Consistent-Aware Deep Learning for Person Re-Identification in a Camera Network- Re-Ranking Person Re-Identification With k-Reciprocal Encoding- Multiple People Tracking by Lifted Multicut and Person Re-Identification</code></pre><p>[1] Mengyue Geng, Yaowei Wang, Tao Xiang, Yonghong Tian. Deep transfer learning for person reidentification[J]. arXiv preprint arXiv:1611.05244, 2016.</p><p>[2] Yutian Lin, Liang Zheng, Zhedong Zheng, YuWu, Yi Yang. Improving person re-identification by attribute and identity learning[J]. arXiv preprint arXiv:1703.07220, 2017.</p><p>[3] Rahul Rama Varior, Bing Shuai, Jiwen Lu, Dong Xu, Gang Wang. A siamese long short-term memory architecture for human re-identification[C]//European Conference on Computer Vision. Springer, 2016:135–153.</p><p>[4]Liang Zheng, Yujia Huang, Huchuan Lu, Yi Yang. Pose invariant embedding for deep person reidentification[J]. arXiv preprint arXiv:1701.07732, 2017.</p><p>[5]  Haiyu Zhao, Maoqing Tian, Shuyang Sun, Jing Shao, Junjie Yan, Shuai Yi, Xiaogang Wang, Xiaoou Tang. Spindle net: Person re-identification with human body region guided feature decomposition and fusion[C]. CVPR, 2017.</p><p>[6] Zhong Z, Zheng L, Zheng Z, et al. Camera Style Adaptation for Person Re-identification[J]. arXiv preprint arXiv:1711.10295, 2017.</p><p>[7] Wei L, Zhang S, Gao W, et al. Person Transfer GAN to Bridge Domain Gap for Person Re-Identification[J]. arXiv preprint arXiv:1711.08565, 2017.</p><p>[8] Qian X, Fu Y, Wang W, et al. Pose-Normalized Image Generation for Person Re-identification[J]. arXiv preprint arXiv:1712.02225, 2017.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="Re-ID" scheme="https://world4jason.github.io/categories/Re-ID/"/>
    
    
      <category term="Tracking" scheme="https://world4jason.github.io/tags/Tracking/"/>
    
      <category term="image retrieval" scheme="https://world4jason.github.io/tags/image-retrieval/"/>
    
      <category term="survey" scheme="https://world4jason.github.io/tags/survey/"/>
    
  </entry>
  
  <entry>
    <title>PYTHON中如何使用*ARGS和**KWARGS</title>
    <link href="https://world4jason.github.io/2017/12/24/PYTHON%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ARGS%E5%92%8C-KWARGS/"/>
    <id>https://world4jason.github.io/2017/12/24/PYTHON中如何使用-ARGS和-KWARGS/</id>
    <published>2017-12-24T10:48:14.000Z</published>
    <updated>2018-01-04T07:24:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>範例與翻譯理解自<a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/" target="_blank" rel="external">連結</a>與<a href="http://appsgaga.com/python%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-init%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8Cargs-kwargs%E9%80%99%E5%85%A9%E5%80%8B%E5%8F%83%E6%95%B8%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/" target="_blank" rel="external">連結</a></p><h2 id="args跟-kwargs是類似的東西，是可有可無的參數。-一顆星的-args是tuple，可以接受很多的值。兩顆星的-kwargs一樣是可以接受很多值，但是是接受dictionary。"><a href="#args跟-kwargs是類似的東西，是可有可無的參數。-一顆星的-args是tuple，可以接受很多的值。兩顆星的-kwargs一樣是可以接受很多值，但是是接受dictionary。" class="headerlink" title="*args跟 **kwargs是類似的東西，是可有可無的參數。 一顆星的*args是tuple，可以接受很多的值。兩顆星的**kwargs一樣是可以接受很多值，但是是接受dictionary。"></a>*args跟 **kwargs是類似的東西，是可有可無的參數。 一顆星的*args是tuple，可以接受很多的值。兩顆星的**kwargs一樣是可以接受很多值，但是是接受dictionary。</h2><p>###一顆星用法</p><p>範例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args</span><span class="params">(farg, *args)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"formal arg:"</span>, farg</div><div class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</div><div class="line">        <span class="keyword">print</span> <span class="string">"another arg:"</span>, arg</div><div class="line">        </div><div class="line">test_var_args(<span class="number">1</span>, <span class="string">"two"</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">formal arg: <span class="number">1</span></div><div class="line">another arg: two</div><div class="line">another arg: <span class="number">3</span></div></pre></td></tr></table></figure><p>###兩顆星用法</p><p>範例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_kwargs</span><span class="params">(farg, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"formal arg:"</span>, farg</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:</div><div class="line">        <span class="keyword">print</span> <span class="string">"another keyword arg: %s: %s"</span> % (key, kwargs[key])</div><div class="line"></div><div class="line">test_var_kwargs(farg=<span class="number">1</span>, myarg2=<span class="string">"two"</span>, myarg3=<span class="number">3</span>)</div></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">formal arg: <span class="number">1</span></div><div class="line">another keyword arg: myarg2: two</div><div class="line">another keyword arg: myarg3: <span class="number">3</span></div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15141999823321.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="順序問題"><a href="#順序問題" class="headerlink" title="順序問題"></a>順序問題</h3><p>如果function定義時如上圖先放了tuple才是dictionary，呼叫時參數先放dictionary再放tuple會跳error。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;範例與翻譯理解自&lt;a href=&quot;http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;連結&lt;/a&gt;與&lt;a h
      
    
    </summary>
    
      <category term="Code" scheme="https://world4jason.github.io/categories/Code/"/>
    
    
      <category term="code" scheme="https://world4jason.github.io/tags/code/"/>
    
      <category term="python" scheme="https://world4jason.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 筆記</title>
    <link href="https://world4jason.github.io/2017/12/13/python-note/"/>
    <id>https://world4jason.github.io/2017/12/13/python-note/</id>
    <published>2017-12-13T07:35:34.000Z</published>
    <updated>2017-12-25T10:49:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Different in Py2 and Py3</p><p>Pickle module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>]&lt;<span class="number">3</span>:</div><div class="line">    <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">import</span> _pickle <span class="keyword">as</span> pickle</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Different in Py2 and Py3&lt;/p&gt;
&lt;p&gt;Pickle module&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="Python" scheme="https://world4jason.github.io/categories/Python/"/>
    
    
      <category term="code" scheme="https://world4jason.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>zi2zi: Master Chinese Calligraphy with Conditional Adversarial Networks</title>
    <link href="https://world4jason.github.io/2017/12/01/zi2zi/"/>
    <id>https://world4jason.github.io/2017/12/01/zi2zi/</id>
    <published>2017-11-30T19:36:19.000Z</published>
    <updated>2017-12-09T19:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15128482902404.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Generated samples. Related code can be found <a href="https://github.com/kaonashi-tyc/zi2zi" target="_blank" rel="external">here</a></p><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>字體風格轉換<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15128485151045.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>直接用CNN進行風格轉換會有下列問題</p><ol><li>生成常常是模糊的</li><li>多數生成結果是失敗的</li><li>只能做一對一生成</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15128485338820.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>結論：用GAN試試看</p><h2 id="用GAN秒殺一切！"><a href="#用GAN秒殺一切！" class="headerlink" title="用GAN秒殺一切！"></a>用GAN秒殺一切！</h2><p>這篇借鑒了三篇paper內容</p><p><a href="https://arxiv.org/abs/1611.07004" target="_blank" rel="external">Image-to-Image Translation with Conditional Adversarial Networks</a><br><a href="https://arxiv.org/abs/1610.09585" target="_blank" rel="external">Conditional Image Synthesis With Auxiliary Classifier GANs</a><br><a href="https://arxiv.org/abs/1611.02200" target="_blank" rel="external">Unsupervised Cross-Domain Image Generation</a></p><p>主要是由pix2pix這篇修改而來的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15128487302209.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>其中Encoder跟Decoder還有Discriminator是直接用pix2pix的, 尤其是裡面的Unet模型</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="GAN" scheme="https://world4jason.github.io/categories/GAN/"/>
    
    
      <category term="Generation" scheme="https://world4jason.github.io/tags/Generation/"/>
    
      <category term="Generative Model" scheme="https://world4jason.github.io/tags/Generative-Model/"/>
    
      <category term="GAN" scheme="https://world4jason.github.io/tags/GAN/"/>
    
      <category term="Style Transfer" scheme="https://world4jason.github.io/tags/Style-Transfer/"/>
    
  </entry>
  
  <entry>
    <title>Faster R-CNN</title>
    <link href="https://world4jason.github.io/2017/11/11/Faster%20R-CNN/"/>
    <id>https://world4jason.github.io/2017/11/11/Faster R-CNN/</id>
    <published>2017-11-10T18:13:59.000Z</published>
    <updated>2018-04-10T07:52:36.627Z</updated>
    
    <content type="html"><![CDATA[<p>#Outline</p><ul><li>R-CNN, Fast R-CNN, Faster R-CNN 關係</li><li>流程圖</li><li>BackBone</li><li>RPN<ul><li>Anchor</li><li>ROI Pooling</li><li>Bounding box regression</li></ul></li><li>訓練</li><li>測試</li><li></li></ul><h2 id="R-CNN-Fast-R-CNN-Faster-R-CNN-關係"><a href="#R-CNN-Fast-R-CNN-Faster-R-CNN-關係" class="headerlink" title="R-CNN, Fast R-CNN, Faster R-CNN 關係"></a>R-CNN, Fast R-CNN, Faster R-CNN 關係</h2><table><thead><tr><th><center>網路架構</center></th><th><center>使用方法</center></th><th><center>流程</center></th><th><center>缺點</center></th><th><center>重點貢獻</center></th></tr></thead><tbody><tr><td>R-CNN</td><td>1.使用Selective Search 提取 Region Propose <br>2. 利用在ImageNet 訓練的CNN網路提取特徵 <br>3.Bounding Box regression做邊框計算 <br>4.由K個二分類SVM做分類(Ｋ= 任務分類數量)</td><td>1.先利用SS提取2K個候選區(圖片) <br>2.每個候選區經過CNN取得特徵 <br>3.特徵交由每個SVM計算分數以及Bbox Regressor調整邊框範圍</td><td>1.訓練步驟繁瑣（微調網絡+訓練SVM +訓練bbox）<br>2.訓練，測試均速度慢 <br>3.訓練佔空間(每張圖片SS提取了2K個候選區)</td><td>1.從DPM HSC的34.3％直接提升到了66％（mAP）<br>2.引入 CNN來做檢測問題</td></tr><tr><td>Fast R-CNN</td><td>1.使用Selective Search 提取 Region Propose <br>2. 利用在ImageNet 訓練的CNN網路提取特徵 <br>3.Bounding Box regression配合多任務損失函數做邊框計算 <br>4.Softmax做分類</td><td>1.先利用SS提取2K個候選區(邊框資訊) <br>2.整張圖用CNN取得特徵圖 <br>3.將每個圖提取的邊框資訊(2K個候選區)對應到特徵圖上取得2K個特徵<br>4.透過ROI Pooling將不同大小的特徵統一成同樣大小<br>5.每個特徵交經過處理後由Softmax計算分數以及Bbox Regressor調整邊框範圍</td><td>1.依舊用SS提取RP（耗時2-3s，特徵提取耗時0.32s）<br>2.無法滿足實時應用，沒有真正實現端到端訓練測試<br>3.利用了GPU，但是RP是在CPU上運算</td><td>1.由66.9％提升至70％<br>2.每張圖像耗時約為3s。</td></tr><tr><td>Faster R-CNN</td><td>1.使用Region Propose Network 提取 Region Propose <br>2. 利用在ImageNet 訓練的CNN網路提取特徵 <br>3. BBox Regressor 配合多任務損失函數做邊框計算<br>4.Softmax做分類</td><td>1.原圖先經過網路得到特徵圖 <br>2.特徵圖經過RPN得到Proposed Region以及相應對分數 <br>3. 採用NMS篩出Top-N個框(N=300) <br>4.透過ROI Pooling將不同大小的特徵統一成同樣大小<br>5.N個篩選出的框對應回原特徵圖取得N特徵 <br>6.每個特徵交經過處理後由Softmax計算分數以及Bbox Regressor調整邊框範圍</td><td>1.還是無法達到Real-Time detection <br>2.計算量還是比較大，因為經過RPN得到多個Proposed Region，再對每個RP做Classification的話，還是有大量的重複計算。</td><td>1.提出了RPN，換掉了速度瓶頸的關鍵(SS)，提高了檢測精度和速度<br>2.真正實現end-to-end的目標檢測框架<br>3.RPN生成bbox僅需約10ms。</td></tr></tbody></table><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231974376489.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15232012344585.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(1）輸入測試圖像;<br>(2）將整張圖片輸入CNN，進行特徵提取;<br>(3）用RPN生成建議窗口(建議)，每張圖片生成300個建議窗口;<br>(4）把建議窗口映射到CNN的最後一層卷積feature map上;<br>(5）通過RoI pooling層使每個RoI生成固定尺寸的特徵圖;<br>(6）利用Softmax Loss（探測分類概率）和Smooth L1 Loss（探測邊框回歸）對分類概率和邊框回歸（Bounding box regression）聯合訓練。</p><h2 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h2><p>原論文沒有特別提網路架構 一般來說是用ZF Net後來都是用VGG架構，甚至是後來用RESNET或是FPN<br>這裡就VGG16來討論，此結構中需要注意的是<br><strong>所有的Conv層都是：kernel_size = 3，pad= 1</strong><br><strong>所有的Pooling都是：kernel_size = 2，stride= 2</strong><br>Faster RCNN 中Conv層對所有的捲積都做了擴邊處理（pad = 1，即填充一圈0），導致原圖變為（M+2）x（N+2）大小，再做3x3卷積後輸出MxN </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">輸出圖片大小計算：[（M + <span class="number">2</span>） -  <span class="number">3</span> +<span class="number">1</span>] x [（N + <span class="number">2</span>） -  <span class="number">3</span> +<span class="number">1</span> ]</div></pre></td></tr></table></figure><p>因此Conv層中的轉換次數層不改變輸入和輸出矩陣大小</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15231978666930.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>說明：卷積核mxm，輸入圖片WxH（擴邊之後的尺寸），則輸出圖片的尺寸是（W-m + 1）x（H-m + 1）</p><h2 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15232012107286.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h3><h3 id="ROI-POOLING"><a href="#ROI-POOLING" class="headerlink" title="ROI POOLING"></a>ROI POOLING</h3><p>ROI POOLING 概念如下圖所示<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15137535435975.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15137536007979.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Outline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R-CNN, Fast R-CNN, Faster R-CNN 關係&lt;/li&gt;
&lt;li&gt;流程圖&lt;/li&gt;
&lt;li&gt;BackBone&lt;/li&gt;
&lt;li&gt;RPN&lt;ul&gt;
&lt;li&gt;Anchor&lt;/li&gt;
&lt;li&gt;ROI Pooling&lt;
      
    
    </summary>
    
      <category term="Detection" scheme="https://world4jason.github.io/categories/Detection/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="R-CNN" scheme="https://world4jason.github.io/tags/R-CNN/"/>
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Object Detection" scheme="https://world4jason.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Conditional GAN - 條件式生成對抗網路</title>
    <link href="https://world4jason.github.io/2017/11/08/Conditional-GAN/"/>
    <id>https://world4jason.github.io/2017/11/08/Conditional-GAN/</id>
    <published>2017-11-08T05:48:12.000Z</published>
    <updated>2017-11-08T12:37:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="GAN" scheme="https://world4jason.github.io/categories/GAN/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Generation" scheme="https://world4jason.github.io/tags/Generation/"/>
    
      <category term="Generative Model" scheme="https://world4jason.github.io/tags/Generative-Model/"/>
    
      <category term="GAN" scheme="https://world4jason.github.io/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>GAN - Generative Adversarial Network</title>
    <link href="https://world4jason.github.io/2017/11/07/GAN-Generative-Adversarial-Network/"/>
    <id>https://world4jason.github.io/2017/11/07/GAN-Generative-Adversarial-Network/</id>
    <published>2017-11-07T15:00:02.000Z</published>
    <updated>2017-11-08T12:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Generative-Adversarial-Networks-GANs"><a href="#Generative-Adversarial-Networks-GANs" class="headerlink" title="Generative Adversarial Networks (GANs)"></a>Generative Adversarial Networks (GANs)</h2><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Paper Link</em></th><th style="text-align:left"><em>Value Function</em></th></tr></thead><tbody><tr><td style="text-align:center"><strong>GAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1406.2661" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/GAN.png"></td></tr><tr><td style="text-align:center"><strong>LSGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1611.04076" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/LSGAN.png"></td></tr><tr><td style="text-align:center"><strong>WGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1701.07875" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/WGAN.png"></td></tr><tr><td style="text-align:center"><strong>WGAN-GP</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1704.00028" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/WGAN_GP.png"></td></tr><tr><td style="text-align:center"><strong>DRAGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1705.07215" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/DRAGAN.png"></td></tr><tr><td style="text-align:center"><strong>CGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1411.1784" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/CGAN.png"></td></tr><tr><td style="text-align:center"><strong>infoGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1606.03657" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/infoGAN.png"></td></tr><tr><td style="text-align:center"><strong>ACGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1610.09585" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/ACGAN.png"></td></tr><tr><td style="text-align:center"><strong>EBGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1609.03126" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/EBGAN.png"></td></tr><tr><td style="text-align:center"><strong>BEGAN</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1702.08431" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/BEGAN.png">  </td></tr></tbody></table><h4 id="Variants-of-GAN-structure"><a href="#Variants-of-GAN-structure" class="headerlink" title="Variants of GAN structure"></a>Variants of GAN structure</h4><p><img src="/media/etc/GAN_structure.png"></p><h3 id="Results-for-mnist"><a href="#Results-for-mnist" class="headerlink" title="Results for mnist"></a>Results for mnist</h3><p>Network architecture of generator and discriminator is the exaclty sames as in <a href="https://arxiv.org/abs/1606.03657" target="_blank" rel="external">infoGAN paper</a>.<br>For fair comparison of core ideas in all gan variants, all implementations for network architecture are kept same except EBGAN and BEGAN. Small modification is made for EBGAN/BEGAN, since those adopt auto-encoder strucutre for discriminator. But I tried to keep the capacity of discirminator.</p><h4 id="Random-generation"><a href="#Random-generation" class="headerlink" title="Random generation"></a>Random generation</h4><p>All results are randomly sampled.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 2</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">GAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">LSGAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/LSGAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/LSGAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/LSGAN_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">WGAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">WGAN-GP</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN-GP_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN-GP_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/WGAN-GP_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">DRAGAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/DRAGAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/DRAGAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/DRAGAN_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">EBGAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/EBGAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/EBGAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/EBGAN_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">BEGAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/BEGAN_epoch001_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/BEGAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/BEGAN_epoch024_test_all_classes.png"></td></tr></tbody></table><h4 id="Conditional-generation"><a href="#Conditional-generation" class="headerlink" title="Conditional generation"></a>Conditional generation</h4><p>Each row has the same noise vector and each column has the same label condition.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">CGAN</td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch009_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch024_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">ACGAN</td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/ACGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/ACGAN_epoch009_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/ACGAN_epoch024_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">infoGAN</td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/infoGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/infoGAN_epoch009_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/infoGAN_epoch024_test_all_classes_style_by_style.png"></td></tr></tbody></table><h4 id="InfoGAN-Manipulating-two-continous-codes"><a href="#InfoGAN-Manipulating-two-continous-codes" class="headerlink" title="InfoGAN : Manipulating two continous codes"></a>InfoGAN : Manipulating two continous codes</h4><table align="center"><br><td><img src="/media/mnist_results/infogan/infoGAN_epoch024_test_class_c1c2_2.png"></td><br><td><img src="/media/mnist_results/infogan/infoGAN_epoch024_test_class_c1c2_5.png"></td><br><td><img src="/media/mnist_results/infogan/infoGAN_epoch024_test_class_c1c2_7.png"></td><br><td><img src="/media/mnist_results/infogan/infoGAN_epoch024_test_class_c1c2_9.png"></td><br></table><h3 id="Results-for-fashion-mnist"><a href="#Results-for-fashion-mnist" class="headerlink" title="Results for fashion-mnist"></a>Results for fashion-mnist</h3><p>Comments on network architecture in mnist are also applied to here.<br><a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank" rel="external">Fashion-mnist</a> is a recently proposed dataset consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. (T-shirt/top, Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker, Bag, Ankle boot)</p><h4 id="Random-generation-1"><a href="#Random-generation-1" class="headerlink" title="Random generation"></a>Random generation</h4><p>All results are randomly sampled.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 20</em></th><th style="text-align:center"><em>Epoch 40</em></th></tr></thead><tbody><tr><td style="text-align:center">GAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">LSGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/LSGAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/LSGAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/LSGAN_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">WGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">WGAN-GP</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN-GP_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN-GP_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/WGAN-GP_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">DRAGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/DRAGAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/DRAGAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/DRAGAN_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">EBGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/EBGAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/EBGAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/EBGAN_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">BEGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/BEGAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/BEGAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/BEGAN_epoch039_test_all_classes.png"></td></tr></tbody></table><h4 id="Conditional-generation-1"><a href="#Conditional-generation-1" class="headerlink" title="Conditional generation"></a>Conditional generation</h4><p>Each row has the same noise vector and each column has the same label condition.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 20</em></th><th style="text-align:center"><em>Epoch 40</em></th></tr></thead><tbody><tr><td style="text-align:center">CGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch019_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch039_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">ACGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/ACGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/ACGAN_epoch019_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/ACGAN_epoch039_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">infoGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/infoGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/infoGAN_epoch019_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/infoGAN_epoch039_test_all_classes_style_by_style.png"></td></tr></tbody></table><p>Without hyper-parameter tuning from mnist-version, ACGAN/infoGAN does not work well as compared with CGAN.<br>ACGAN tends to fall into mode-collapse.<br>infoGAN tends to ignore noise-vector. It results in that various style within the same class can not be represented.</p><h4 id="InfoGAN-Manipulating-two-continous-codes-1"><a href="#InfoGAN-Manipulating-two-continous-codes-1" class="headerlink" title="InfoGAN : Manipulating two continous codes"></a>InfoGAN : Manipulating two continous codes</h4><table align="center"><br><td><img src="/media/fashion_mnist_results/infogan/infoGAN_epoch039_test_class_c1c2_1.png"></td><br><td><img src="/media/fashion_mnist_results/infogan/infoGAN_epoch039_test_class_c1c2_4.png"></td><br><td><img src="/media/fashion_mnist_results/infogan/infoGAN_epoch039_test_class_c1c2_5.png"></td><br><td><img src="/media/fashion_mnist_results/infogan/infoGAN_epoch039_test_class_c1c2_8.png"></td><br></table><h3 id="Some-results-for-celebA"><a href="#Some-results-for-celebA" class="headerlink" title="Some results for celebA"></a>Some results for celebA</h3><p>(to be added)</p><h2 id="Variational-Auto-Encoders-VAEs"><a href="#Variational-Auto-Encoders-VAEs" class="headerlink" title="Variational Auto-Encoders (VAEs)"></a>Variational Auto-Encoders (VAEs)</h2><h3 id="Lists-1"><a href="#Lists-1" class="headerlink" title="Lists"></a>Lists</h3><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Paper Link</em></th><th style="text-align:left"><em>Loss Function</em></th></tr></thead><tbody><tr><td style="text-align:center"><strong>VAE</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1312.6114" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/CVAE.png"> </td></tr><tr><td style="text-align:center"><strong>CVAE</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1406.5298" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left"><img src="/media/equations/CVAE.png"></td></tr><tr><td style="text-align:center"><strong>DVAE</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1511.06406" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left">(to be added)</td></tr><tr><td style="text-align:center"><strong>AAE</strong></td><td style="text-align:center"><a href="https://arxiv.org/abs/1511.05644" target="_blank" rel="external">Arxiv</a></td><td style="text-align:left">(to be added) </td></tr></tbody></table><h4 id="Variants-of-VAE-structure"><a href="#Variants-of-VAE-structure" class="headerlink" title="Variants of VAE structure"></a>Variants of VAE structure</h4><p><img src="/media/etc/VAE_structure.png"></p><h3 id="Results-for-mnist-1"><a href="#Results-for-mnist-1" class="headerlink" title="Results for mnist"></a>Results for mnist</h3><p>Network architecture of decoder(generator) and encoder(discriminator) is the exaclty sames as in <a href="https://arxiv.org/abs/1606.0365" target="_blank" rel="external">infoGAN paper</a>. The number of output nodes in encoder is different. (2x z_dim for VAE, 1 for GAN)</p><h4 id="Random-generation-2"><a href="#Random-generation-2" class="headerlink" title="Random generation"></a>Random generation</h4><p>All results are randomly sampled.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">VAE</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/VAE_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/VAE_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/VAE_epoch024_test_all_classes.png"></td></tr><tr><td style="text-align:center">GAN</td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch009_test_all_classes.png"></td><td style="text-align:center"><img src="/media/mnist_results/random_generation/GAN_epoch024_test_all_classes.png"></td></tr></tbody></table><p>Results of GAN is also given to compare images generated from VAE and GAN.<br>The main difference (VAE generates smooth and blurry images, otherwise GAN generates sharp and artifact images) is cleary observed from the results.</p><h4 id="Conditional-generation-2"><a href="#Conditional-generation-2" class="headerlink" title="Conditional generation"></a>Conditional generation</h4><p>Each row has the same noise vector and each column has the same label condition.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">CVAE</td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CVAE_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CVAE_epoch009_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CVAE_epoch024_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">CGAN</td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch009_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/mnist_results/conditional_generation/CGAN_epoch024_test_all_classes_style_by_style.png"></td></tr></tbody></table><p>Results of CGAN is also given to compare images generated from CVAE and CGAN.</p><h4 id="Learned-manifold"><a href="#Learned-manifold" class="headerlink" title="Learned manifold"></a>Learned manifold</h4><p>The following results can be reproduced with command:<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">python</span> <span class="comment">main</span><span class="string">.</span><span class="comment">py</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dataset</span> <span class="comment">mnist</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">gan_type</span> <span class="comment">VAE</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">epoch</span> <span class="comment">25</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">batch_size</span> <span class="comment">64</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dim_z</span> <span class="comment">2</span></div></pre></td></tr></table></figure></p><p>Please notice that dimension of noise-vector z is 2.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">VAE</td><td style="text-align:center"><img src="/media/mnist_results/learned_manifold/VAE_epoch000_learned_manifold.png"></td><td style="text-align:center"><img src="/media/mnist_results/learned_manifold/VAE_epoch009_learned_manifold.png"></td><td style="text-align:center"><img src="/media/mnist_results/learned_manifold/VAE_epoch024_learned_manifold.png"></td></tr></tbody></table><h3 id="Results-for-fashion-mnist-1"><a href="#Results-for-fashion-mnist-1" class="headerlink" title="Results for fashion-mnist"></a>Results for fashion-mnist</h3><p>Comments on network architecture in mnist are also applied to here. </p><p>The following results can be reproduced with command:<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">python</span> <span class="comment">main</span><span class="string">.</span><span class="comment">py</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dataset</span> <span class="comment">fashion</span><span class="literal">-</span><span class="comment">mnist</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">gan_type</span> &lt;<span class="comment">TYPE</span>&gt; <span class="literal">-</span><span class="literal">-</span><span class="comment">epoch</span> <span class="comment">40</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">batch_size</span> <span class="comment">64</span></div></pre></td></tr></table></figure></p><h4 id="Random-generation-3"><a href="#Random-generation-3" class="headerlink" title="Random generation"></a>Random generation</h4><p>All results are randomly sampled.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 20</em></th><th style="text-align:center"><em>Epoch 40</em></th></tr></thead><tbody><tr><td style="text-align:center">VAE</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/VAE_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/VAE_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/VAE_epoch039_test_all_classes.png"></td></tr><tr><td style="text-align:center">GAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch000_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch019_test_all_classes.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/random_generation/GAN_epoch039_test_all_classes.png"></td></tr></tbody></table><p>Results of GAN is also given to compare images generated from VAE and GAN.</p><h4 id="Conditional-generation-3"><a href="#Conditional-generation-3" class="headerlink" title="Conditional generation"></a>Conditional generation</h4><p>Each row has the same noise vector and each column has the same label condition.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 20</em></th><th style="text-align:center"><em>Epoch 40</em></th></tr></thead><tbody><tr><td style="text-align:center">CVAE</td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CVAE_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CVAE_epoch019_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CVAE_epoch039_test_all_classes_style_by_style.png"></td></tr><tr><td style="text-align:center">CGAN</td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch000_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch019_test_all_classes_style_by_style.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/conditional_generation/CGAN_epoch039_test_all_classes_style_by_style.png"></td></tr></tbody></table><p>Results of CGAN is also given to compare images generated from CVAE and CGAN.</p><h4 id="Learned-manifold-1"><a href="#Learned-manifold-1" class="headerlink" title="Learned manifold"></a>Learned manifold</h4><p>The following results can be reproduced with command:<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">python</span> <span class="comment">main</span><span class="string">.</span><span class="comment">py</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dataset</span> <span class="comment">fashion</span><span class="literal">-</span><span class="comment">mnist</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">gan_type</span> <span class="comment">VAE</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">epoch</span> <span class="comment">25</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">batch_size</span> <span class="comment">64</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dim_z</span> <span class="comment">2</span></div></pre></td></tr></table></figure></p><p>Please notice that dimension of noise-vector z is 2.</p><table><thead><tr><th style="text-align:center"><em>Name</em></th><th style="text-align:center"><em>Epoch 1</em></th><th style="text-align:center"><em>Epoch 10</em></th><th style="text-align:center"><em>Epoch 25</em></th></tr></thead><tbody><tr><td style="text-align:center">VAE</td><td style="text-align:center"><img src="/media/fashion_mnist_results/learned_manifold/VAE_epoch000_learned_manifold.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/learned_manifold/VAE_epoch009_learned_manifold.png"></td><td style="text-align:center"><img src="/media/fashion_mnist_results/learned_manifold/VAE_epoch024_learned_manifold.png"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Generative-Adversarial-Networks-GANs&quot;&gt;&lt;a href=&quot;#Generative-Adversarial-Networks-GANs&quot; class=&quot;headerlink&quot; title=&quot;Generative Adversari
      
    
    </summary>
    
      <category term="GAN" scheme="https://world4jason.github.io/categories/GAN/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Generation" scheme="https://world4jason.github.io/tags/Generation/"/>
    
      <category term="Generative Model" scheme="https://world4jason.github.io/tags/Generative-Model/"/>
    
      <category term="GAN" scheme="https://world4jason.github.io/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>Self-Study Courses List</title>
    <link href="https://world4jason.github.io/2017/11/07/Self-Study-Courses-List/"/>
    <id>https://world4jason.github.io/2017/11/07/Self-Study-Courses-List/</id>
    <published>2017-11-07T03:26:18.000Z</published>
    <updated>2018-03-25T19:43:47.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="學習路程"><a href="#學習路程" class="headerlink" title="學習路程"></a>學習路程</h2><ul><li>Python<br>  政大 or MIT python都好 後者比較舊但作業比較多</li><li>ML<br>  先看莫凡 看完再看NTU基礎的 剩下就看要看進階的還是standford的</li></ul><h2 id="Basic-Concept-of-Machine-Learning"><a href="#Basic-Concept-of-Machine-Learning" class="headerlink" title="Basic Concept of Machine Learning"></a>Basic Concept of Machine Learning</h2><ul><li>Morvan莫凡<ul><li><a href="https://www.youtube.com/playlist?list=PLXO45tsB95cIFm8Y8vMkNNPPXAtYXwKin" target="_blank" rel="external">有趣的機器學習</a></li></ul></li></ul><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><ul><li><a href="https://cn.udacity.com/course/intro-to-machine-learning--ud120" target="_blank" rel="external">Udacity ud120</a></li></ul><h2 id="Machine-Learning-Deep-Learning-Series"><a href="#Machine-Learning-Deep-Learning-Series" class="headerlink" title="Machine Learning + Deep Learning Series"></a>Machine Learning + Deep Learning Series</h2><ul><li><h3 id="National-Taiwan-University-李宏毅"><a href="#National-Taiwan-University-李宏毅" class="headerlink" title="National Taiwan University - 李宏毅"></a>National Taiwan University - 李宏毅</h3><ul><li><p>BASIC</p><ul><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML16.html" target="_blank" rel="external">Machine Learning (2016,Fall)</a></li><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML17.html" target="_blank" rel="external">Machine Learning (2017,Spring)</a></li><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML17_2.html" target="_blank" rel="external">Machine Learning (2017,Spring)</a></li></ul></li><li><p>ADV</p><ul><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_MLDS17.html" target="_blank" rel="external">Machine Learning and having it deep and structured (2017,Spring</a></li><li><a href="speech.ee.ntu.edu.tw/~tlkagk/courses_MLDS17.html">Machine Learning and having it deep and structured (2017,Fall)</a><br>-</li><li><h3 id="National-Taiwan-University-林軒田"><a href="#National-Taiwan-University-林軒田" class="headerlink" title="National Taiwan University - 林軒田"></a>National Taiwan University - 林軒田</h3></li></ul></li><li><a href="https://www.youtube.com/watch?v=nQvpFSMPhr0&amp;list=PLXVfgk9fNX2I7tB6oIINGBmW50rrmFTqf" target="_blank" rel="external">機器學習基石</a></li><li><a href="https://www.youtube.com/watch?v=A-GxGCCAIrg&amp;list=PLXVfgk9fNX2IQOYPmqjqWsNUFl2kpk1U2" target="_blank" rel="external">機器學習技法</a></li></ul><ul><li><h3 id="Coursera"><a href="#Coursera" class="headerlink" title="Coursera"></a>Coursera</h3><ul><li><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="external">Deep Learning Specialization</a></li></ul></li></ul></li><li><h3 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h3><ul><li><a href="http://www.cosmosshadow.com/ml" target="_blank" rel="external">Blog</a></li><li><a href="https://brohrer.mcknote.com/zh-Hant/" target="_blank" rel="external">資料科學・機器・人</a></li></ul></li><li><h3 id="GitHub-sjchoi86"><a href="#GitHub-sjchoi86" class="headerlink" title="GitHub-sjchoi86"></a>GitHub-sjchoi86</h3><p>  <a href="https://github.com/sjchoi86/dl-workshop" target="_blank" rel="external">https://github.com/sjchoi86/dl-workshop</a><br>  <a href="https://github.com/sjchoi86/dl_tutorials" target="_blank" rel="external">https://github.com/sjchoi86/dl_tutorials</a><br>  <a href="https://github.com/sjchoi86/Deep-Learning-101" target="_blank" rel="external">https://github.com/sjchoi86/Deep-Learning-101</a><br>  <a href="https://github.com/sjchoi86/dl_tutorials_10weeks" target="_blank" rel="external">https://github.com/sjchoi86/dl_tutorials_10weeks</a><br>  <a href="https://github.com/sjchoi86/dl_tutorials_3rd" target="_blank" rel="external">https://github.com/sjchoi86/dl_tutorials_3rd</a></p></li><li><h3 id="Deep-Learning-Specialize"><a href="#Deep-Learning-Specialize" class="headerlink" title="Deep Learning Specialize"></a>Deep Learning Specialize</h3><ul><li><a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="external">網易雲中文版</a>  </li></ul></li><li><h3 id="Colorado"><a href="#Colorado" class="headerlink" title="Colorado"></a>Colorado</h3><ul><li><a href="https://www.cs.colorado.edu/~mozer/Teaching/syllabi/DeepLearningFall2017/" target="_blank" rel="external">Neural Networks and Deep Learning 2017 Fall</a> </li></ul></li><li><h3 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h3><ul><li><a href="https://github.com/zsdonghao/deep-learning-book" target="_blank" rel="external">花書</a> </li></ul></li><li><h3 id="Google-Brain-Hugo-Larochelle"><a href="#Google-Brain-Hugo-Larochelle" class="headerlink" title="Google Brain Hugo Larochelle"></a>Google Brain Hugo Larochelle</h3><ul><li><a href="http://www.mooc.ai/course/300#modal" target="_blank" rel="external">Mooc.ai</a><h2 id="Visual"><a href="#Visual" class="headerlink" title="Visual"></a>Visual</h2></li></ul></li><li><h3 id="Stanford-CS213"><a href="#Stanford-CS213" class="headerlink" title="Stanford CS213"></a>Stanford CS213</h3><ul><li><a href="http://cs231n.stanford.edu/2016/syllabus" target="_blank" rel="external">2016 Syllabus</a> </li><li><a href="https://www.youtube.com/playlist?list=PLkt2uSq6rBVctENoVBg1TpCC7OQi31AlC" target="_blank" rel="external">2016 Winter</a></li><li><p><a href="http://study.163.com/course/introduction/1003223001.htm" target="_blank" rel="external">2016 winter 中文版</a></p></li><li><p><a href="http://cs231n.stanford.edu/2017/syllabus" target="_blank" rel="external">2017 Syllabus</a></p></li><li><a href="https://www.youtube.com/playlist?list=PL3FW7Lu3i5JvHM8ljYj-zLfQRF3EO8sYv" target="_blank" rel="external">2017 Spring</a></li><li><a href="http://www.mooc.ai/course/268" target="_blank" rel="external">2017 winter 中文版</a></li></ul></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><h3 id="NCCU"><a href="#NCCU" class="headerlink" title="NCCU"></a>NCCU</h3><ul><li><a href="http://moocs.nccu.edu.tw/course/121/intro" target="_blank" rel="external">Data science with Python</a></li></ul></li><li><h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><ul><li><a href="http://learn.edx.org/mit-python/" target="_blank" rel="external">MIT Python</a> </li></ul></li><li><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul><li><a href="https://www.saltycrane.com/blog/tag/python/" target="_blank" rel="external">saltycrane</a>   </li><li><a href="https://ithelp.ithome.com.tw/users/20107274/ironman/1578" target="_blank" rel="external">30天python雜談</a></li></ul></li><li><h3 id="Effective-Python"><a href="#Effective-Python" class="headerlink" title="Effective Python"></a>Effective Python</h3><ul><li><a href="https://guoruibiao.gitbooks.io/effective-python/content/" target="_blank" rel="external">59 Specific Ways to Write Better Python簡中翻譯</a><br>-<a href="http://seanlin.logdown.com/archives" target="_blank" rel="external">Python慣用語&amp;Effective Python</a></li></ul></li></ul><h2 id="Deep-Learning-Framework-Tutorial"><a href="#Deep-Learning-Framework-Tutorial" class="headerlink" title="Deep Learning Framework Tutorial"></a>Deep Learning Framework Tutorial</h2><ul><li><h3 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><ul><li><a href="tensorflow.org">Tensorflow 官方</a></li><li><a href="http://usyiyi.cn/documents/tensorflow_13/tutorials/index.html" target="_blank" rel="external">Tensorflow 中文</a> </li><li><a href="wiki.jikexueyuan.com/project/tensorflow-zh">Tensorflow 中文2</a></li><li><a href="https://www.youtube.com/playlist?list=PLQ0sVbIj3URf94DQtGPJV629ctn2c1zN-" target="_blank" rel="external">Stanford CS20SI - TensorFlow</a></li><li><a href="https://www.udacity.com/course/deep-learning--ud730" target="_blank" rel="external">Udacity ud730</a></li><li><a href="https://www.youtube.com/playlist?list=PL-XeOa5hMEYxNzHM7YLRjIwE1k3VQpqEh" target="_blank" rel="external">cognitiveclass.ai</a></li><li><a href="http://learningtensorflow.com/" target="_blank" rel="external">learning Tensorflow Web</a></li><li><a href="https://web.stanford.edu/class/cs20si/index.html" target="_blank" rel="external">Stanford CS 20</a></li><li><a href="https://www.datacamp.com/community/tutorials/cnn-tensorflow-python" target="_blank" rel="external">Data Camp</a></li></ul></li><li><h3 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h3><ul><li><a href=""></a></li></ul></li><li><h3 id="Keras"><a href="#Keras" class="headerlink" title="Keras"></a>Keras</h3><ul><li><a href="https://www.datacamp.com/community/tutorials/deep-learning-python" target="_blank" rel="external">Data Camp</a></li><li><a href="https://github.com/erhwenkuo/deep-learning-with-keras-notebooks" target="_blank" rel="external">緯創資通</a> </li></ul></li></ul><h2 id="Tech-Paper"><a href="#Tech-Paper" class="headerlink" title="Tech Paper"></a>Tech Paper</h2><ul><li><a href="https://github.com/sjchoi86/dl_tutorials" target="_blank" rel="external">dl_tutorials</a>   </li><li><a href="https://github.com/sjchoi86/dl_tutorials_10weeks" target="_blank" rel="external">dl_tutorials_10weeks</a></li></ul><h2 id="Deep-Learning-in-practice"><a href="#Deep-Learning-in-practice" class="headerlink" title="Deep Learning in practice"></a>Deep Learning in practice</h2><ul><li><p><a href="http://www.fast.ai/" target="_blank" rel="external">Fast.ai</a> </p><ul><li><a href="http://course.fast.ai/" target="_blank" rel="external">Fast.ai 2018 Course</a> </li><li><a href="course17.fast.ai">Fast.ai 2017 Course</a></li></ul></li><li><h3 id="Tensorflow-1"><a href="#Tensorflow-1" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><ul><li><a href="https://github.com/sjchoi86/Tensorflow-101" target="_blank" rel="external">Tensorflow 101</a></li></ul></li><li><h3 id="Keras-1"><a href="#Keras-1" class="headerlink" title="Keras"></a>Keras</h3><ul><li><a href="https://github.com/erhwenkuo/deep-learning-with-keras-notebooks" target="_blank" rel="external">緯創</a></li></ul></li><li><h3 id="MXNET"><a href="#MXNET" class="headerlink" title="MXNET"></a>MXNET</h3><p>  -<a href="https://zh.gluon.ai/" target="_blank" rel="external">Gluon</a><br>  -<a href="https://github.com/mli/gluon-tutorials-zh/" target="_blank" rel="external">Gluon-Github</a></p></li><li><h3 id="Udacity-Self-drive"><a href="#Udacity-Self-drive" class="headerlink" title="Udacity Self-drive"></a>Udacity Self-drive</h3><ul><li><a href="https://github.com/ndrplz/self-driving-car" target="_blank" rel="external">self-driving-car</a> <h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2>-CapsuleNet</li></ul></li><li><a href="https://www.youtube.com/watch?v=UhGWH3hb3Hk" target="_blank" rel="external">李宏毅</a></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li><a href="https://try.github.io/" target="_blank" rel="external">Git</a></li><li><h2 id="Online-IDE"><a href="#Online-IDE" class="headerlink" title="Online IDE"></a>Online IDE</h2></li><li><a href="https://repl.it/" target="_blank" rel="external">repl.it</a></li></ul><h2 id="Online-practice"><a href="#Online-practice" class="headerlink" title="Online practice"></a>Online practice</h2><ul><li><a href="http://www.codewars.com/" target="_blank" rel="external">codewars</a></li></ul><h2 id="Two-Minutes-Paper"><a href="#Two-Minutes-Paper" class="headerlink" title="Two Minutes Paper"></a>Two Minutes Paper</h2><ul><li><a href="">Two Minute Papers</a><br>雷鋒網也有兩分鐘系列</li></ul><h2 id="Leiphone"><a href="#Leiphone" class="headerlink" title="Leiphone"></a>Leiphone</h2><ul><li><a href="https://www.leiphone.com/news/201710/ipWGpR7iTGkvNhHL.html" target="_blank" rel="external">Video Collection</a></li></ul><h2 id="Scikit-Learn"><a href="#Scikit-Learn" class="headerlink" title="Scikit-Learn"></a>Scikit-Learn</h2><p>-<a href="https://www.datacamp.com/community/tutorials/scikit-learn-python" target="_blank" rel="external">Data Camp</a></p><h2 id="尚未整理"><a href="#尚未整理" class="headerlink" title="尚未整理"></a>尚未整理</h2><p><a href="http://open.163.com/special/opencourse/daishu.html" target="_blank" rel="external">http://open.163.com/special/opencourse/daishu.html</a></p><p><a href="http://www.kaierlong.me/blog/post/kaierlong/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E6%B1%87%E6%80%BB" target="_blank" rel="external">http://www.kaierlong.me/blog/post/kaierlong/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E6%B1%87%E6%80%BB</a></p><p>Cognitive Class<br><a href="https://cognitiveclass.ai/" target="_blank" rel="external">https://cognitiveclass.ai/</a><br>Cognitive Class - IBM Big Data Learn<br><a href="https://cognitiveclass.ai/learn/big-data/" target="_blank" rel="external">https://cognitiveclass.ai/learn/big-data/</a><br>Cognitive Class - IBM Hadoop Foundations Learn<br><a href="https://cognitiveclass.ai/learn/hadoop/" target="_blank" rel="external">https://cognitiveclass.ai/learn/hadoop/</a><br>Cognitive Class - IBM Data Science Foundations Learn<br><a href="https://cognitiveclass.ai/learn/data-science/" target="_blank" rel="external">https://cognitiveclass.ai/learn/data-science/</a><br>Cognitive Class - IBM Data Science for Business Learn<br><a href="https://cognitiveclass.ai/learn/data-science-business/" target="_blank" rel="external">https://cognitiveclass.ai/learn/data-science-business/</a><br>Cognitive Class - IBM Deep Learning Learn<br><a href="https://cognitiveclass.ai/learn/deep-learning/" target="_blank" rel="external">https://cognitiveclass.ai/learn/deep-learning/</a></p><p><a href="http://dlib.net/ml_guide.svg" target="_blank" rel="external">http://dlib.net/ml_guide.svg</a></p><p><a href="http://www.deepideas.net/deep-learning-from-scratch-theory-and-implementation/" target="_blank" rel="external">http://www.deepideas.net/deep-learning-from-scratch-theory-and-implementation/</a></p><p><a href="https://www.ctolib.com/" target="_blank" rel="external">https://www.ctolib.com/</a></p><p><a href="http://blog.csdn.net/u011974639/article/details/73196349" target="_blank" rel="external">http://blog.csdn.net/u011974639/article/details/73196349</a></p><p><a href="https://handong1587.github.io/deep_learning/2015/10/09/object-detection.html#" target="_blank" rel="external">https://handong1587.github.io/deep_learning/2015/10/09/object-detection.html#</a></p><p><a href="https://my.oschina.net/hardbone/blog/798552" target="_blank" rel="external">https://my.oschina.net/hardbone/blog/798552</a><br><a href="https://jhui.github.io/" target="_blank" rel="external">https://jhui.github.io/</a></p><p><a href="https://developers.google.cn/machine-learning/crash-course/ml-intro" target="_blank" rel="external">https://developers.google.cn/machine-learning/crash-course/ml-intro</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;學習路程&quot;&gt;&lt;a href=&quot;#學習路程&quot; class=&quot;headerlink&quot; title=&quot;學習路程&quot;&gt;&lt;/a&gt;學習路程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Python&lt;br&gt;  政大 or MIT python都好 後者比較舊但作業比較多&lt;/li&gt;
&lt;li&gt;ML&lt;b
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="Self-Study" scheme="https://world4jason.github.io/tags/Self-Study/"/>
    
      <category term="Courses" scheme="https://world4jason.github.io/tags/Courses/"/>
    
  </entry>
  
  <entry>
    <title>GAN - Github List</title>
    <link href="https://world4jason.github.io/2017/11/07/GAN-Github-List/"/>
    <id>https://world4jason.github.io/2017/11/07/GAN-Github-List/</id>
    <published>2017-11-07T02:34:33.000Z</published>
    <updated>2017-12-13T14:47:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>paperList<br><a href="https://github.com/zhangqianhui/AdversarialNetsPapers" target="_blank" rel="external">https://github.com/zhangqianhui/AdversarialNetsPapers</a><br><a href="https://github.com/hindupuravinash/the-gan-zoo" target="_blank" rel="external">https://github.com/hindupuravinash/the-gan-zoo</a><br><a href="https://github.com/nightrome/really-awesome-gan" target="_blank" rel="external">https://github.com/nightrome/really-awesome-gan</a><br><a href="https://github.com/nashory/gans-awesome-applications" target="_blank" rel="external">https://github.com/nashory/gans-awesome-applications</a><br><a href="https://github.com/GKalliatakis/Delving-deep-into-GANs" target="_blank" rel="external">https://github.com/GKalliatakis/Delving-deep-into-GANs</a></p><p>====IMPLEMENTATION====<br><a href="https://github.com/YadiraF/GAN" target="_blank" rel="external">https://github.com/YadiraF/GAN</a><br><a href="https://github.com/jonbruner/generative-adversarial-networks" target="_blank" rel="external">https://github.com/jonbruner/generative-adversarial-networks</a><br><a href="https://github.com/tjwei/GANotebooks" target="_blank" rel="external">https://github.com/tjwei/GANotebooks</a><br><a href="https://github.com/AaronYALai/Generative_Adversarial_Networks_PyTorch" target="_blank" rel="external">https://github.com/AaronYALai/Generative_Adversarial_Networks_PyTorch</a></p><p>最完整的GAN實作<br><a href="https://github.com/znxlwm/pytorch-generative-model-collections" target="_blank" rel="external">https://github.com/znxlwm/pytorch-generative-model-collections</a><br><a href="https://github.com/hwalsuklee/tensorflow-generative-model-collections" target="_blank" rel="external">https://github.com/hwalsuklee/tensorflow-generative-model-collections</a><br><a href="https://github.com/eriklindernoren/Keras-GAN" target="_blank" rel="external">https://github.com/eriklindernoren/Keras-GAN</a></p><p>用貓玩GAN<br><a href="https://github.com/AlexiaJM/Deep-learning-with-cats" target="_blank" rel="external">https://github.com/AlexiaJM/Deep-learning-with-cats</a></p><p>tensorflow跟GAN都有<br><a href="https://github.com/wiseodd/generative-models" target="_blank" rel="external">https://github.com/wiseodd/generative-models</a></p><p><a href="https://github.com/jtoy/awesome-tensorflow" target="_blank" rel="external">https://github.com/jtoy/awesome-tensorflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;paperList&lt;br&gt;&lt;a href=&quot;https://github.com/zhangqianhui/AdversarialNetsPapers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zhangqianh
      
    
    </summary>
    
      <category term="Github" scheme="https://world4jason.github.io/categories/Github/"/>
    
    
      <category term="Generation" scheme="https://world4jason.github.io/tags/Generation/"/>
    
      <category term="Generative Model" scheme="https://world4jason.github.io/tags/Generative-Model/"/>
    
      <category term="GAN" scheme="https://world4jason.github.io/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>R-CNN:Region proposals+CNN</title>
    <link href="https://world4jason.github.io/2017/11/06/R-CNN/"/>
    <id>https://world4jason.github.io/2017/11/06/R-CNN/</id>
    <published>2017-11-06T07:42:19.000Z</published>
    <updated>2017-11-07T15:30:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RCNN-將CNN引入目標檢測的開山之作"><a href="#RCNN-將CNN引入目標檢測的開山之作" class="headerlink" title="RCNN- 將CNN引入目標檢測的開山之作"></a>RCNN- 將CNN引入目標檢測的開山之作</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099664021450.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="http://cs231n.stanford.edu/slides/2016/winter1516_lecture8.pdf" target="_blank" rel="external">CS231n lecture8</a></p><p>RCNN (論文：Rich feature hierarchies for accurate object detection and semantic segmentation) 是將CNN方法引入目標檢測領域， 大大提高了目標檢測效果，可以說改變了目標檢測領域的主要研究思路， 緊隨其後的系列文章： （ RCNN ）, Fast RCNN , Faster RCNN 代表該領域當前最高水準。</p><p>【論文主要特點】（相對傳統方法的改進）</p><p>速度： 經典的目標檢測算法使用滑動窗法依次判斷所有可能的區域。 本文則(採用Selective Search方法)預先提取一系列較可能是物體的候選區域，之後僅在這些候選區域上(採用CNN)提取特徵，進行判斷。<br>訓練集： 經典的目標檢測算法在區域中提取人工設定的特徵。 本文則採用深度網絡進行特徵提取。 使用兩個數據庫： 一個較大的識​​別庫（ImageNet ILSVC 2012）：標定每張圖片中物體的類別。 一千萬圖像，1000類。 一個較小的檢測庫（PASCAL VOC 2007）：標定每張圖片中，物體的類別和位置，一萬圖像，20類。 本文使用識別庫進行預訓練得到CNN（有監督預訓練），而後用檢測庫調優參數，最後在檢測庫上評測。<br>看到這裡也許你已經對很多名詞很困惑，下面會解釋。 先來看看它的基本流程：</p><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099664799300.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099707654238.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>RCNN算法分為4個步驟 </p><p>候選區域生成： 一張圖像生成1K~2K個候選區域（採用Selective Search 方法）<br>特徵提取： 對每個候選區域，使用深度卷積網絡提取特徵（CNN）<br>類別判斷： 特徵送入每一類的SVM 分類器，判別是否屬於該類<br>位置精修： 使用回歸器精細修正候選框位置 </p><p>【基礎知識===================================】</p><h3 id="Selective-Search"><a href="#Selective-Search" class="headerlink" title="Selective Search"></a>Selective Search</h3><p>主要思想:<br>使用一種過分割手段，將圖像分割成小區域(1k~2k 個)<br>查看現有小區域，按照合併規則合併可能性最高的相鄰兩個區域。 重複直到整張圖像合併成一個區域位置<br>輸出所有曾經存在過的區域，所謂候選區域<br>其中合併規則如下： 優先合併以下四種區域：</p><p>顏色（顏色直方圖）相近的<br>紋理（梯度直方圖）相近的<br>合併後總面積小的： 保證合併操作的尺度較為均勻，避免一個大區域陸續“吃掉”其他小區域（例：設有區域abcdefgh。較好的合併方式是：ab-cd-ef-gh - &gt; abcd-efgh -&gt; abcdefgh。 不好的合併方法是：ab-cdefgh -&gt;abcd-efgh -&gt;abcdef-gh -&gt; abcdefgh）<br>合併後，總面積在其BBOX中所佔比例大的： 保證合併後形狀規則。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099665196976.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>上述四條規則只涉及區域的顏色直方圖、梯度直方圖、面積和位置。 合併後的區域特徵可以直接由子區域特徵計算而來，速度較快。</p><p>有監督預訓練與無監督預訓練: </p><p>(1)無監督預訓練(Unsupervised pre-training)</p><p>預訓練階段的樣本不需要人工標註數據，所以就叫做無監督預訓練。</p><p>(2)有監督預訓練(Supervised pre-training)</p><p>所謂的有監督預訓練也可以把它稱之為遷移學習。 比如你已經有一大堆標註好的人臉年齡分類的圖片數據，訓練了一個CNN，用於人臉的年齡識別。 然後當你遇到新的項目任務時：人臉性別識別，那麼這個時候你可以利用已經訓練好的年齡識別CNN模型，去掉最後一層，然後其它的網絡層參數就直接複製過來，繼續進行訓練，讓它輸出性別。 這就是所謂的遷移學習，說的簡單一點就是把一個任務訓練好的參數，拿到另外一個任務，作為神經網絡的初始參數值,這樣相比於你直接採用隨機初始化的方法，精度可以有很大的提高。 </p><p>對於目標檢測問題： 圖片分類標註好的訓練數據非常多，但是物體檢測的標註數據卻很少，如何用少量的標註數據，訓練高質量的模型，這就是文獻最大的特點，這篇論文采用了遷移學習的思想：先用了ILSVRC2012這個訓練數據庫（這是一個圖片分類訓練數據庫），先進行網絡圖片分類訓練。 這個數據庫有大量的標註數據，共包含了1000種類別物體，因此預訓練階段CNN模型的輸出是1000個神經元（當然也直接可以採用Alexnet訓練好的模型參數）。</p><h3 id="重疊度（IOU）"><a href="#重疊度（IOU）" class="headerlink" title="重疊度（IOU）:"></a>重疊度（IOU）:</h3><p>物體檢測需要定位出物體的bounding box，就像下面的圖片一樣，我們不僅要定位出車輛的bounding box 我們還要識別出bounding box 裡面的物體就是車輛。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099665384173.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>對於bounding box的定位精度，有一個很重要的概念： 因為我們算法不可能百分百跟人工標註的數據完全匹配，因此就存在一個定位精度評價公式：IOU。 它定義了兩個bounding box的重疊度，如下圖所示 </p><p><img src="/media/15099665471055.jpg" alt=""></p><p>就是矩形框A、B的重疊面積佔A、B並集的面積比例。</p><h3 id="非極大值抑制（-NMS-）："><a href="#非極大值抑制（-NMS-）：" class="headerlink" title="非極大值抑制（ NMS ）："></a>非極大值抑制（ NMS ）：</h3><p>RCNN會從一張圖片中找出n個可能是物體的矩形框，然後為每個矩形框為做類別分類概率：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099665602965.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>就像上面的圖片一樣，定位一個車輛，最後算法就找出了一堆的方框，我們需要判別哪些矩形框是沒用的。 非極大值抑制的方法是：先假設有6個矩形框，根據分類器的類別分類概率做排序，假設從小到大屬於車輛的概率分別為A、B、C、D、E、F。</p><p>(1)從最大概率矩形框F開始，分別判斷A~E與F的重疊度IOU是否大於某個設定的閾值;</p><p>(2)假設B、D與F的重疊度超過閾值，那麼就扔掉B、D；並標記第一個矩形框F，是我們保留下來的。</p><p>(3)從剩下的矩形框A、C、E中，選擇概率最大的E，然後判斷E與A、C的重疊度，重疊度大於一定的閾值，那麼就扔掉；並標記E是我們保留下來的第二個矩形框。</p><p>就這樣一直重複，找到所有被保留下來的矩形框。</p><p>非極大值抑制（NMS）顧名思義就是抑制不是極大值的元素，搜索局部的極大值。 這個局部代表的是一個鄰域，鄰域有兩個參數可變，一是鄰域的維數，二是鄰域的大小。 這裡不討論通用的NMS算法，而是用於在目標檢測中用於提取分數最高的窗口的。 例如在行人檢測中，滑動窗口經提取特徵，經分類器分類識別後，每個窗口都會得到一個分數。 但是滑動窗口會導致很多窗口與其他窗口存在包含或者大部分交叉的情況。 這時就需要用到NMS來選取那些鄰域里分數最高（是行人的概率最大），並且抑制那些分數低的窗口。</p><p>###VOC物體檢測任務:</p><p>相當於一個競賽，裡麵包含了20個物體類別： PASCAL VOC2011 Example Images 還有一個背景，總共就相當於21個類別，因此一會設計fine-tuning CNN的時候，我們softmax分類輸出層為21個神經元。</p><p>【各個階段詳解===================================】 </p><p>總體思路再回顧：</p><p>首先對每一個輸入的圖片產生近2000個不分種類的候選區域（region proposals），然後使用CNNs從每個候選框中提取一個固定長度的特徵向量（4096維度），接著對每個取出的特徵向量使用特定種類的線性SVM進行分類。 也就是總個過程分為三個程序：a、找出候選框；b、利用CNN提取特徵向量；c、利用SVM進行特徵向量分類。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099666382907.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="候選框搜索階段："><a href="#候選框搜索階段：" class="headerlink" title="候選框搜索階段："></a>候選框搜索階段：</h4><p>當我們輸入一張圖片時，我們要搜索出所有可能是物體的區域，這裡採用的就是前面提到的Selective Search方法，通過這個算法我們搜索出2000個候選框。 然後從上面的總流程圖中可以看到，搜出的候選框是矩形的，而且是大小各不相同。 然而CNN對輸入圖片的大小是有固定的，如果把搜索到的矩形選框不做處理，就扔進CNN中，肯定不行。 因此對於每個輸入的候選框都需要縮放到固定的大小。 下面我們講解要怎麼進行縮放處理，為了簡單起見我們假設下一階段CNN所需要的輸入圖片大小是個正方形圖片227*227。 因為我們經過selective search 得到的是矩形框，paper試驗了兩種不同的處理方法：</p><p>(1)各向異性縮放</p><p>這種方法很簡單，就是不管圖片的長寬比例，管它是否扭曲，進行縮放就是了，全部縮放到CNN輸入的大小227*227，如下圖(D)所示；<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099666636066.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>(2)各向同性縮放</p><p>因為圖片扭曲後，估計會對後續CNN的訓練精度有影響，於是作者也測試了“各向同性縮放”方案。 有兩種辦法</p><p>A、先擴充後裁剪： 直接在原始圖片中，把bounding box的邊界進行擴展延伸成正方形，然後再進行裁剪；如果已經延伸到了原始圖片的外邊界，那麼就用bounding box中的顏色均值填充；如上圖(B)所示;</p><p>B、先裁剪後擴充：先把bounding box圖片裁剪出來，然後用固定的背景顏色填充成正方形圖片(背景顏色也是採用bounding box的像素顏色均值),如上圖(C)所示;</p><p>對於上面的異性、同性縮放，文獻還有個padding處理，上面的示意圖中第1、3行就是結合了padding=0,第2、4行結果圖採用padding=16的結果。 經過最後的試驗，作者發現採用各向異性縮放、padding=16的精度最高。</p><p>（備註：候選框的搜索策略作者也考慮過使用一個滑動窗口的方法，然而由於更深的網絡，更大的輸入圖片和滑動步長，使得使用滑動窗口來定位的方法充滿了挑戰。） </p><p>CNN特徵提取階段： </p><p>1、算法實現</p><p>a、網絡結構設計階段<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099666918238.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099666873410.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>網絡架構兩個可選方案：第一選擇經典的Alexnet；第二選擇VGG16。 經過測試Alexnet精度為58.5%，VGG16精度為66%。 VGG這個模型的特點是選擇比較小的捲積核、選擇較小的跨步，這個網絡的精度高，不過計算量是Alexnet的7倍。 後面為了簡單起見，我們就直接選用Alexnet，並進行講解；Alexnet特徵提取部分包含了5個卷積層、2個全連接層，在Alexnet中p5層神經元個數為9216、 f6、f7的神經元個數都是4096，通過這個網絡訓練完畢後，最後提取特徵每個輸入候選框圖片都能得到一個4096維的特徵向量。</p><p>b、網絡有監督預訓練階段（圖片數據庫：ImageNet ILSVC ）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099667042004.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>參數初始化部分：物體檢測的一個難點在於，物體標籤訓練數據少，如果要直接採用隨機初始化CNN參數的方法，那麼目前的訓練數據量是遠遠不夠的。 這種情況下，最好的是採用某些方法，把參數初始化了，然後在進行有監督的參數微調，這里文獻採用的是有監督的預訓練。 所以paper在設計網絡結構的時候，是直接用Alexnet的網絡，然後連參數也是直接採用它的參數，作為初始的參數值，然後再fine-tuning訓練。 網絡優化求解時採用隨機梯度下降法，學習率大小為0.001；</p><p>c、fine-tuning階段（圖片數據庫： PASCAL VOC）</p><p>我們接著採用selective search 搜索出來的候選框（PASCAL VOC 數據庫中的圖片） 繼續對上面預訓練的CNN模型進行fine-tuning訓練。 假設要檢測的物體類別有N類，那麼我們就需要把上面預訓練階段的CNN模型的最後一層給替換掉，替換成N+1個輸出的神經元(加1，表示還有一個背景) (20 + 1bg = 21)，然後這一層直接採用參數隨機初始化的方法，其它網絡層的參數不變；接著就可以開始繼續SGD訓練了。 開始的時候，SGD學習率選擇0.001，在每次訓練的時候，我們batch size大小選擇128，其中32個事正樣本、96個事負樣本。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099667194897.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>關於正負樣本問題：</p><p>一張照片我們得到了2000個候選框。 然而人工標註的數據一張圖片中就只標註了正確的bounding box，我們搜索出來的2000個矩形框也不可能會出現一個與人工標註完全匹配的候選框。 因此在CNN階段我們需要用IOU為2000個bounding box打標籤。 如果用selective search挑選出來的候選框與物體的人工標註矩形框（PASCAL VOC的圖片都有人工標註）的重疊區域IoU大於0.5，那麼我們就把這個候選框標註成物體類別（正樣本），否則我們就把它當做背景類別（負樣本）。</p><p>（備註： 如果不針對特定任務進行fine-tuning，而是把CNN當做特徵提取器，卷積層所學到的特徵其實就是基礎的共享特徵提取層，就類似於SIFT算法一樣，可以用於提取各種圖片的特徵，而f6、f7所學習到的特徵是用於針對特定任務的特徵。打個比方：對於人臉性別識別來說，一個CNN模型前面的捲積層所學習到的特徵就類似於學習人臉共性特徵，然後全連接層所學習的特徵就是針對性別分類的特徵了）</p><p>2.疑惑點 ： CNN訓練的時候，本來就是對bounding box的物體進行識別分類訓練，在訓練的時候最後一層softmax就是分類層。 那麼為什麼作者閒著沒事幹要先用CNN做特徵提取（提取fc7層數據），然後再把提取的特徵用於訓練svm分類器？ </p><p>這個是因為svm訓練和cnn訓練過程的正負樣本定義方式各有不同，導致最後採用CNN softmax輸出比採用svm精度還低。 事情是這樣的，cnn在訓練的時候，對訓練數據做了比較寬鬆的標註，比如一個bounding box可能只包含物體的一部分，那麼我也把它標註為正樣本，用於訓練cnn；採用這個方法的主要原因在於因為CNN容易過擬合，所以需要大量的訓練數據，所以在CNN訓練階段我們是對Bounding box的位置限制條件限制的比較鬆(IOU只要大於0.5都被標註為正樣本了)；然而svm訓練的時候，因為svm適用於少樣本訓練，所以對於訓練樣本數據的IOU要求比較嚴格，我們只有當bounding box把整個物體都包含進去了，我們才把它標註為物體類別，然後訓練svm ，具體請看下文。</p><p>SVM訓練、測試階段</p><p>訓練階段 ：</p><p>這是一個二分類問題，我麼假設我們要檢測車輛。 我們知道只有當bounding box把整量車都包含在內，那才叫正樣本；如果bounding box 沒有包含到車輛，那麼我們就可以把它當做負樣本。 但問題是當我們的檢測窗口只有部分包含物體，那該怎麼定義正負樣本呢？ 作者測試了IOU閾值各種方案數值0,0.1,0.2,0.3,0.4,0.5。 最後通過訓練發現，如果選擇IOU閾值為0.3 效果最好 （選擇為0精度下降了4個百分點，選擇0.5精度下降了5個百分點）,即當重疊度小於0.3的時候，我們就把它標註為負樣本。 一旦CNN f7層特徵被提取出來，那麼我們將為每個物體類訓練一個svm分類器。 當我們用CNN提取2000個候選框，可以得到2000x4096這樣的特徵向量矩陣，然後我們只需要把這樣的一個矩陣與svm權值矩陣4096xN點乘(N為分類類別數目，因為我們訓練的N個svm，每個svm包含了4096個權值w)，就可以得到結果了。 </p><p><img src="/media/15099667603349.jpg" alt=""></p><p>得到的特徵輸入到SVM進行分類看看這個feature vector所對應的region proposal是需要的物體還是無關的實物(background) 。 排序，canny邊界檢測之後就得到了我們需要的bounding-box。 </p><p>再回顧總結一下：整個系統分為三個部分：1.產生不依賴與特定類別的region proposals，這些region proposals定義了一個整個檢測器可以獲得的候選目標2.一個大的捲積神經網絡，對每個region產生一個固定長度的特徵向量3.一系列特定類別的線性SVM分類器。</p><p>位置精修： 目標檢測問題的衡量標準是重疊面積：許多看似準確的檢測結果，往往因為候選框不夠準確，重疊面積很小。 故需要一個位置精修步驟。 回歸器：對每一類目標，使用一個線性脊回歸器進行精修。 正則項λ=10000。 輸入為深度網絡pool5層的4096維特徵，輸出為xy方向的縮放和平移。 訓練樣本：判定為本類的候選框中和真值重疊面積大於0.6的候選框。 </p><p>測試階段 ：</p><p>使用selective search的方法在測試圖片上提取2000個region propasals ，將每個region proposals歸一化到227x227，然後再CNN中正向傳播，將最後一層得到的特徵提取出來。 然後對於每一個類別，使用為這一類訓練的SVM分類器對提取的特徵向量進行打分，得到測試圖片中對於所有region proposals的對於這一類的分數，再使用貪心的非極大值抑制（ NMS）去除相交的多餘的框。 再對這些框進行canny邊緣檢測，就可以得到bounding-box(then B-BoxRegression)。</p><p>（非極大值抑制（NMS）先計算出每一個bounding box的面積，然後根據score進行排序，把score最大的bounding box作為選定的框，計算其餘bounding box與當前最大score與box的IoU，去除IoU大於設定的閾值的bounding box。然後重複上面的過程，直至候選bounding box為空，然後再將score小於一定閾值的選定框刪除得到這一類的結果（然後繼續進行下一個分類） 。作者提到花費在region propasals和提取特徵的時間是13s/張-GPU和53s/張-CPU，可以看出時間還是很長的，不能夠達到及時性。 </p><p>完。</p><p>本文主要整理自以下文章：</p><p>RCNN學習筆記(0):rcnn簡介<br>RCNN學習筆記(1):Rich feature hierarchies for accurate object detection and semantic segmentation<br>RCNN學習筆記(2):Rich feature hierarchies for accurate object detection and semantic segmentation<br>《Rich feature hierarchies for Accurate Object Detection and Segmentation》<br>《Spatial 《Pyramid Pooling in Deep Convolutional Networks for Visual Recognition》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RCNN-將CNN引入目標檢測的開山之作&quot;&gt;&lt;a href=&quot;#RCNN-將CNN引入目標檢測的開山之作&quot; class=&quot;headerlink&quot; title=&quot;RCNN- 將CNN引入目標檢測的開山之作&quot;&gt;&lt;/a&gt;RCNN- 將CNN引入目標檢測的開山之作&lt;/h1
      
    
    </summary>
    
      <category term="Detection" scheme="https://world4jason.github.io/categories/Detection/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="R-CNN" scheme="https://world4jason.github.io/tags/R-CNN/"/>
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Object Detection" scheme="https://world4jason.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Object Detection with Convolution Neural Network Series</title>
    <link href="https://world4jason.github.io/2017/11/06/Object-Detection-with-Convolution-Neural-Network/"/>
    <id>https://world4jason.github.io/2017/11/06/Object-Detection-with-Convolution-Neural-Network/</id>
    <published>2017-11-05T18:51:33.000Z</published>
    <updated>2017-12-28T06:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-Detection-with-Convolution-Neural-Network-Series"><a href="#Object-Detection-with-Convolution-Neural-Network-Series" class="headerlink" title="Object Detection with Convolution Neural Network Series"></a>Object Detection with Convolution Neural Network Series</h1><p>Outline</p><ul><li>檢測任務?</li><li>R-CNN</li><li>Fast R-CNN</li><li>Faster R-CNN</li><li>SSD</li><li>YOLO</li></ul><h2 id="檢測任務"><a href="#檢測任務" class="headerlink" title="檢測任務"></a>檢測任務</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15100388874028.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15099707654238.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></center><p>步驟 </p><ol><li>候選區域生成： 一張圖像生成1K~2K個候選區域（採用Selective Search 方法） </li><li>特徵提取： 對每個候選區域，使用深度卷積網絡提取特徵（CNN） </li><li>類別判斷： 特徵送入每一類的SVM 分類器，判別是否屬於該類 </li><li>位置精修： 使用回歸器精細修正候選框位置 </li><li>用Non-Maximum Selection 合併後選框</li></ol><h2 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h2><center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15100371122830.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></center><br>步驟<br>1. 候選區域生成： 一張圖像生成1K~2K個候選區域（採用Selective Search 方法）<br>2. 特徵提取： 該張圖片，使用深度卷積網絡提取特徵（CNN）<br>3. ROI Pooling：<br>4. 類別判斷： 特徵送入每一類的SVM 分類器，判別是否屬於該類<br>5. 位置精修： 使用回歸器精細修正候選框位置<br>6. 用Non-Maximum Selection 合併後選框<br><br>## Faster R-CNN<br><center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15100371249624.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></center><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15100374296902.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br></center><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/media/15144441218022.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Reference:</p><ol><li><a href="http://zh.gluon.ai/" target="_blank" rel="external">http://zh.gluon.ai/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object-Detection-with-Convolution-Neural-Network-Series&quot;&gt;&lt;a href=&quot;#Object-Detection-with-Convolution-Neural-Network-Series&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Detection" scheme="https://world4jason.github.io/categories/Detection/"/>
    
    
      <category term="Deep Learning" scheme="https://world4jason.github.io/tags/Deep-Learning/"/>
    
      <category term="R-CNN" scheme="https://world4jason.github.io/tags/R-CNN/"/>
    
      <category term="CNN" scheme="https://world4jason.github.io/tags/CNN/"/>
    
      <category term="Object Detection" scheme="https://world4jason.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>CPP 筆記</title>
    <link href="https://world4jason.github.io/2017/10/19/CPP-note/"/>
    <id>https://world4jason.github.io/2017/10/19/CPP-note/</id>
    <published>2017-10-19T04:07:48.000Z</published>
    <updated>2018-01-04T07:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>##C++中cin、cin.get()、cin.getline()、getline()、gets()等函数的用法<br>学C++的时候，这几个输入函数弄的有点迷糊；这里做个小结，为了自己复习，也希望对后来者能有所帮助，如果有差错的地方还请各位多多指教</p><p>1、cin<br>2、cin.get()<br>3、cin.getline()<br>4、getline()<br>5、gets()<br>6、getchar()</p><p>附:cin.ignore();cin.get()//跳过一个字符,例如不想要的回车,空格等字符</p><p>1、cin&gt;&gt;         </p><p>用法1：最基本，也是最常用的用法，输入一个数字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">int</span> a,b; </div><div class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; </div><div class="line"><span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：2[回车]3[回车]<br>输出：5</p><p>注意:&gt;&gt; 是会过滤掉不可见字符（如 空格 回车，TAB 等）<br>cin&gt;&gt;noskipws&gt;&gt;input[j];//不想略过空白字符，那就使用 noskipws 流控制</p><p>用法2：接受一个字符串，遇“空格”、“TAB”、“回车”都结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">char</span> a[<span class="number">20</span>]; </div><div class="line"><span class="built_in">cin</span>&gt;&gt;a; </div><div class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：jkljkljkl<br>输出：jkljkljkl</p><p>输入：jkljkl jkljkl       //遇空格结束<br>输出：jkljkl</p><p>2、cin.get()</p><p>用法1： cin.get(字符变量名)可以用来接收字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">char</span> ch; </div><div class="line">ch=<span class="built_in">cin</span>.get();               <span class="comment">//或者cin.get(ch); </span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：jljkljkl<br>输出：j</p><p>用法2：cin.get(字符数组名,接收字符数目)用来接收一行字符串,可以接收空格</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">char</span> a[<span class="number">20</span>]; </div><div class="line"><span class="built_in">cin</span>.get(a,<span class="number">20</span>); </div><div class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：jkl jkl jkl<br>输出：jkl jkl jkl</p><p>输入：abcdeabcdeabcdeabcdeabcde （输入25个字符）<br>输出：abcdeabcdeabcdeabcd              （接收19个字符+1个’\0’）</p><p>用法3：cin.get(无参数)没有参数主要是用于舍弃输入流中的不需要的字符,或者舍弃回车,弥补cin.get(字符数组名,接收字符数目)的不足.</p><p>这个我还不知道怎么用，知道的前辈请赐教；</p><p>3、cin.getline()   // 接受一个字符串，可以接收空格并输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">char</span> m[<span class="number">20</span>]; </div><div class="line"><span class="built_in">cin</span>.getline(m,<span class="number">5</span>); </div><div class="line"><span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：jkljkljkl<br>输出：jklj</p><p>接受5个字符到m中，其中最后一个为’\0’，所以只看到4个字符输出；</p><p>如果把5改成20：<br>输入：jkljkljkl<br>输出：jkljkljkl</p><p>输入：jklf fjlsjf fjsdklf<br>输出：jklf fjlsjf fjsdklf</p><p>//延伸：<br>//cin.getline()实际上有三个参数，cin.getline(接受字符串的看哦那间m,接受个数5,结束字符)<br>//当第三个参数省略时，系统默认为’\0’<br>//如果将例子中cin.getline()改为cin.getline(m,5,’a’);当输入jlkjkljkl时输出jklj，输入jkaljkljkl时，输出jk</p><p>当用在多维数组中的时候，也可以用cin.getline(m[i],20)之类的用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="keyword">char</span> m[<span class="number">3</span>][<span class="number">20</span>]; </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) </div><div class="line">&#123; </div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n请输入第"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">"个字符串："</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line"><span class="built_in">cin</span>.getline(m[i],<span class="number">20</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) </div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输出m["</span>&lt;&lt;j&lt;&lt;<span class="string">"]的值:"</span>&lt;&lt;m[j]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请输入第1个字符串：<br>kskr1</p><p>请输入第2个字符串：<br>kskr2</p><p>请输入第3个字符串：<br>kskr3</p><p>输出m[0]的值:kskr1<br>输出m[1]的值:kskr2<br>输出m[2]的值:kskr3</p><p>4、getline()     // 接受一个字符串，可以接收空格并输出，需包含“#include<string>”</string></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line">main () </div><div class="line">&#123; </div><div class="line"><span class="built_in">string</span> str; </div><div class="line">getline(<span class="built_in">cin</span>,str); </div><div class="line"><span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入：jkljkljkl<br>输出：jkljkljkl</p><p>输入：jkl jfksldfj jklsjfl<br>输出：jkl jfksldfj jklsjfl</p><p>和cin.getline()类似，但是cin.getline()属于istream流，而getline()属于string流，是不一样的两个函数</p><p>在寫程式的時候遇到這個問題<br>因為atoi函式只吃char*<br>上網GOOGLE一下找到了解決之法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> x;</div><div class="line"><span class="keyword">int</span> temp=atoi(x.c_str());</div><div class="line">c_str()可以轉換<span class="built_in">string</span>成為<span class="keyword">char</span>*</div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span> ;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> s ;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>,s))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n=s.length();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </div><div class="line">        &#123;</div><div class="line">            a=s.at(i);</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##C++中cin、cin.get()、cin.getline()、getline()、gets()等函数的用法&lt;br&gt;学C++的时候，这几个输入函数弄的有点迷糊；这里做个小结，为了自己复习，也希望对后来者能有所帮助，如果有差错的地方还请各位多多指教&lt;/p&gt;
&lt;p&gt;1、ci
      
    
    </summary>
    
      <category term="Code" scheme="https://world4jason.github.io/categories/Code/"/>
    
    
      <category term="code" scheme="https://world4jason.github.io/tags/code/"/>
    
      <category term="CPP" scheme="https://world4jason.github.io/tags/CPP/"/>
    
      <category term="C++" scheme="https://world4jason.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://world4jason.github.io/2017/03/28/hello-world/"/>
    <id>https://world4jason.github.io/2017/03/28/hello-world/</id>
    <published>2017-03-28T06:57:15.000Z</published>
    <updated>2017-03-28T06:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
